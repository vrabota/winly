generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String    @id @default(uuid()) @db.VarChar(36)
  auth0Id   String    @unique @map("auth0_id") @db.VarChar(100)
  firstName String?   @map("first_name") @db.VarChar(100)
  lastName  String?   @map("last_name") @db.VarChar(100)
  picture   String?   @map("picture") @db.Text
  email     String    @db.VarChar(100)
  role      UserRole? @default(ADMIN)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organizations          Organization[]
  accountAddedBy         Account[]      @relation("addedBy")
  modifiedBy             Account[]      @relation("modifiedBy")
  organizationAddedBy    Campaign[]     @relation("addedBy")
  organizationModifiedBy Campaign[]     @relation("modifiedBy")

  @@index([role])
  @@index([auth0Id])
  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  MANAGER

  @@map("user_roles_enum")
}

model Organization {
  id       String  @id @default(uuid()) @db.VarChar(36)
  name     String? @default("My Organization") @db.VarChar(100)
  contacts Int?    @default(0) @db.SmallInt
  ownerId  String? @map("owner_id") @db.VarChar(100)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users     User[]
  accounts  Account[]
  campaigns Campaign[]
  Activity  Activity[]
  Lead      Lead[]
  Warmup    Warmup[]

  @@map("organizations")
}

model Account {
  id              String       @id @default(uuid()) @db.VarChar(36)
  refreshToken    String?      @map("refresh_token") @db.Text
  picture         String?      @map("picture") @db.Text
  email           String       @unique @db.VarChar(100)
  appPassword     String?      @map("app_password") @db.VarChar(100)
  firstName       String?      @map("first_name") @db.VarChar(100)
  lastName        String?      @map("last_name") @db.VarChar(100)
  organizationId  String       @map("organization_id") @db.VarChar(36)
  addedById       String       @map("added_by_id") @db.VarChar(100)
  modifiedById    String       @map("modified_by_id") @db.VarChar(100)
  code            String       @db.VarChar(7)
  replyRate       Int?         @default(30) @db.SmallInt
  dailyMaxLimit   Int?         @default(40) @db.SmallInt
  currentMaxLimit Int?         @db.SmallInt
  stepLimit       Int?         @default(1) @db.SmallInt
  warmupState     Boolean?     @default(false) @map("warmup_state")
  type            AccountType
  state           AccountState @default(CONNECTING)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organization           Organization @relation(fields: [organizationId], references: [id])
  addedBy                User         @relation("addedBy", fields: [addedById], references: [id])
  modifiedBy             User         @relation("modifiedBy", fields: [modifiedById], references: [id])
  Activity               Activity[]
  recipientWarmupAccount Warmup[]     @relation("recipientWarmupAccount")
  senderWarmupAccount    Warmup[]     @relation("senderWarmupAccount")

  @@index([organizationId])
  @@index([type])
  @@index([addedById])
  @@index([modifiedById])
  @@map("accounts")
}

enum AccountType {
  GOOGLE_OAUTH
  GOOGLE_APP_PASSWORD

  @@map("account_type_enum")
}

enum AccountState {
  CONNECTING
  CONNECTED
  ERROR
  DISCONNECTED

  @@map("account_state_enum")
}

model Campaign {
  id             String         @id @default(uuid()) @db.VarChar(36)
  name           String         @db.VarChar(100)
  accountIds     Json?          @map("account_ids")
  scheduleDays   Json?          @map("schedule_days")
  time           Json?          @map("time")
  sequences      Json?          @map("sequences")
  startDate      DateTime?      @map("start_date")
  endDate        DateTime?      @map("end_date")
  dailyLimit     Int?           @map("daily_limit")
  timezone       String?        @map("timezone")
  organizationId String         @map("organization_id") @db.VarChar(36)
  addedById      String         @map("added_by_id") @db.VarChar(100)
  modifiedById   String         @map("modified_by_id") @db.VarChar(100)
  sendOnReply    Boolean?       @map("send_on_reply")
  openTracking   Boolean?       @map("open_tracking")
  status         CampaignStatus

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  leads      Lead[]
  activities Activity[]

  organization Organization @relation(fields: [organizationId], references: [id])
  addedBy      User         @relation("addedBy", fields: [addedById], references: [id])
  modifiedBy   User         @relation("modifiedBy", fields: [modifiedById], references: [id])

  @@index([organizationId])
  @@index([status])
  @@index([addedById])
  @@index([modifiedById])
  @@map("campaigns")
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSE

  @@map("campaign_status_enum")
}

model Lead {
  id              String     @id @default(uuid()) @db.VarChar(36)
  campaignId      String     @map("campaign_id") @db.VarChar(36)
  organizationId  String     @map("organization_id") @db.VarChar(36)
  email           String     @db.VarChar(100)
  firstName       String?    @map("first_name") @db.VarChar(100)
  lastName        String?    @map("last_name") @db.VarChar(100)
  website         String?    @map("website") @db.VarChar(100)
  companyName     String?    @map("companyName") @db.VarChar(100)
  phone           String?    @map("phone") @db.VarChar(100)
  customVariables Json?
  status          LeadStatus @default(LEAD)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  campaign     Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([campaignId, email])
  @@index([campaignId])
  @@index([organizationId])
  @@map("leads")
}

enum LeadStatus {
  LEAD
  INTERESTED
  MEETING_BOOKED
  MEETING_COMPLETED
  CLOSED
  OUT_OF_OFFICE
  WRONG_PERSON
  NOT_INTERESTED

  @@map("lead_status_enum")
}

model Activity {
  id             String          @id @default(uuid()) @db.VarChar(36)
  campaignId     String          @map("campaign_id") @db.VarChar(36)
  organizationId String          @map("organization_id") @db.VarChar(36)
  leadEmail      String          @map("lead_email") @db.VarChar(100)
  messageId      String          @map("message_id") @db.VarChar(100)
  queueId        String?         @map("queue_id") @db.VarChar(36)
  threadId       String?         @map("thread_id") @db.VarChar(36)
  read           Boolean?
  subject        String?         @db.Text
  body           String?         @db.Text
  accountId      String          @map("account_id") @db.VarChar(36)
  step           Int?            @db.SmallInt
  status         ActivityStatus? @default(QUEUED)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  campaign     Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  account      Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([queueId])
  @@index([accountId])
  @@index([status])
  @@index([leadEmail])
  @@index([messageId])
  @@index([campaignId])
  @@index([organizationId])
  @@map("activities")
}

enum ActivityStatus {
  REPLIED
  OPENED
  ERROR
  BOUNCED
  CONTACTED
  CLICKED
  COMPLETED
  QUEUED

  @@map("activity_status_enum")
}

model Warmup {
  id                 String        @id @default(uuid()) @db.VarChar(36)
  organizationId     String        @map("organization_id") @db.VarChar(36)
  recipientAccountId String        @map("recipient_account_id") @db.VarChar(100)
  senderAccountId    String        @map("sender_account_id") @db.VarChar(100)
  messageId          String        @map("message_id") @db.VarChar(100)
  queueId            String?       @map("queue_id") @db.VarChar(36)
  threadId           String?       @map("thread_id") @db.VarChar(36)
  status             WarmupStatus? @default(QUEUED)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  recipientWarmupAccount Account      @relation("recipientWarmupAccount", fields: [recipientAccountId], references: [id], onDelete: Cascade)
  senderWarmupAccount    Account      @relation("senderWarmupAccount", fields: [senderAccountId], references: [id], onDelete: Cascade)
  organization           Organization @relation(fields: [organizationId], references: [id])

  @@index([recipientAccountId])
  @@index([senderAccountId])
  @@index([organizationId])
  @@map("warmups")
}

enum WarmupStatus {
  REPLIED
  QUEUED
  SENT
  SPAM
  INBOX
  ERROR
  BOUNCED

  @@map("warmup_status_enum")
}
