/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/accounts": {
    /**
     * List accounts 
     * @description Lists registered accounts
     */
    get: operations["getV1Accounts"];
  };
  "/v1/autoconfig": {
    /**
     * Discover Email settings 
     * @description Try to discover IMAP and SMTP settings for an email account
     */
    get: operations["getV1Autoconfig"];
  };
  "/v1/blocklists": {
    /**
     * List blocklists 
     * @description List blocklists with blocked addresses
     */
    get: operations["getV1Blocklists"];
  };
  "/v1/changes": {
    /**
     * Stream state changes 
     * @description Stream account state changes as an EventSource
     */
    get: operations["getV1Changes"];
  };
  "/v1/gateways": {
    /**
     * List gateways 
     * @description Lists registered gateways
     */
    get: operations["getV1Gateways"];
  };
  "/v1/license": {
    /**
     * Request license info 
     * @description Get active license information
     */
    get: operations["getV1License"];
    /**
     * Register a license 
     * @description Set up a license for EmailEngine to unlock all features
     */
    post: operations["postV1License"];
    /**
     * Remove license 
     * @description Remove registered active license
     */
    delete: operations["deleteV1License"];
  };
  "/v1/oauth2": {
    /**
     * List OAuth2 applications 
     * @description Lists registered OAuth2 applications
     */
    get: operations["getV1Oauth2"];
    /**
     * Register OAuth2 application 
     * @description Registers a new OAuth2 application for a specific provider
     */
    post: operations["postV1Oauth2"];
  };
  "/v1/outbox": {
    /**
     * List queued messages 
     * @description Lists messages in the Outbox
     */
    get: operations["getV1Outbox"];
  };
  "/v1/settings": {
    /**
     * List specific settings 
     * @description List setting values for specific keys
     */
    get: operations["getV1Settings"];
    /**
     * Set setting values 
     * @description Set setting values for specific keys
     */
    post: operations["postV1Settings"];
  };
  "/v1/stats": {
    /** Return server stats */
    get: operations["getV1Stats"];
  };
  "/v1/templates": {
    /**
     * List account templates 
     * @description Lists stored templates for the account
     */
    get: operations["getV1Templates"];
  };
  "/v1/tokens": {
    /**
     * List root tokens 
     * @description Lists access tokens registered for root access
     */
    get: operations["getV1Tokens"];
  };
  "/v1/account/{account}": {
    /**
     * Get account info 
     * @description Returns stored information about the account. Passwords are not included.
     */
    get: operations["getV1AccountAccount"];
    /**
     * Update account info 
     * @description Updates account information
     */
    put: operations["putV1AccountAccount"];
    /**
     * Remove synced account 
     * @description Stop syncing IMAP account and delete cached values
     */
    delete: operations["deleteV1AccountAccount"];
  };
  "/v1/blocklist/{listId}": {
    /**
     * List blocklist entries 
     * @description List blocked addresses for a list
     */
    get: operations["getV1BlocklistListid"];
    /**
     * Add to blocklist 
     * @description Add an email address to a blocklist
     */
    post: operations["postV1BlocklistListid"];
    /**
     * Remove from blocklist 
     * @description Delete a blocked email address from a list
     */
    delete: operations["deleteV1BlocklistListid"];
  };
  "/v1/gateway/{gateway}": {
    /**
     * Get gateway info 
     * @description Returns stored information about the gateway. Passwords are not included.
     */
    get: operations["getV1GatewayGateway"];
    /**
     * Remove SMTP gateway 
     * @description Delete SMTP gateway data
     */
    delete: operations["deleteV1GatewayGateway"];
  };
  "/v1/logs/{account}": {
    /**
     * Return IMAP logs for an account 
     * @description Output is a downloadable text file
     */
    get: operations["getV1LogsAccount"];
  };
  "/v1/oauth2/{app}": {
    /**
     * Get application info 
     * @description Returns stored information about an OAuth2 application. Secrets are not included.
     */
    get: operations["getV1Oauth2App"];
    /**
     * Update OAuth2 application 
     * @description Updates OAuth2 application information
     */
    put: operations["putV1Oauth2App"];
    /**
     * Remove OAuth2 application 
     * @description Delete OAuth2 application data
     */
    delete: operations["deleteV1Oauth2App"];
  };
  "/v1/account/{account}/messages": {
    /**
     * List messages in a folder 
     * @description Lists messages in a mailbox folder
     */
    get: operations["getV1AccountAccountMessages"];
    /**
     * Update messages 
     * @description Update message information for matching emails
     */
    put: operations["putV1AccountAccountMessages"];
  };
  "/v1/account/{account}/mailboxes": {
    /**
     * List mailboxes 
     * @description Lists all available mailboxes
     */
    get: operations["getV1AccountAccountMailboxes"];
  };
  "/v1/account/{account}/oauth-token": {
    /**
     * Get OAuth2 access token 
     * @description Get the active OAuth2 access token for an account. NB! This endpoint is disabled by default and needs activation on the Service configuration page.
     */
    get: operations["getV1AccountAccountOauthtoken"];
  };
  "/v1/delivery-test/check/{deliveryTest}": {
    /**
     * Check test status 
     * @description Check delivery test status
     */
    get: operations["getV1DeliverytestCheckDeliverytest"];
  };
  "/v1/templates/template/{template}": {
    /**
     * Get template information 
     * @description Retrieve template content and information
     */
    get: operations["getV1TemplatesTemplateTemplate"];
    /**
     * Update a template 
     * @description Update a stored template.
     */
    put: operations["putV1TemplatesTemplateTemplate"];
    /**
     * Remove a template 
     * @description Delete a stored template
     */
    delete: operations["deleteV1TemplatesTemplateTemplate"];
  };
  "/v1/tokens/account/{account}": {
    /**
     * List account tokens 
     * @description Lists access tokens registered for an account
     */
    get: operations["getV1TokensAccountAccount"];
  };
  "/v1/account/{account}/message/{message}": {
    /**
     * Get message information 
     * @description Returns details of a specific message. By default text content is not included, use textType value to force retrieving text
     */
    get: operations["getV1AccountAccountMessageMessage"];
    /**
     * Update message 
     * @description Update message information. Mainly this means changing message flag values
     */
    put: operations["putV1AccountAccountMessageMessage"];
    /**
     * Delete message 
     * @description Move message to Trash or delete it if already in Trash
     */
    delete: operations["deleteV1AccountAccountMessageMessage"];
  };
  "/v1/account/{account}/attachment/{attachment}": {
    /**
     * Download attachment 
     * @description Fetches attachment file as a binary stream
     */
    get: operations["getV1AccountAccountAttachmentAttachment"];
  };
  "/v1/account/{account}/text/{text}": {
    /**
     * Retrieve message text 
     * @description Retrieves message text
     */
    get: operations["getV1AccountAccountTextText"];
  };
  "/v1/account/{account}/message/{message}/source": {
    /**
     * Download raw message 
     * @description Fetches raw message as a stream
     */
    get: operations["getV1AccountAccountMessageMessageSource"];
  };
  "/v1/account": {
    /**
     * Register new account 
     * @description Registers new IMAP account to be synced
     */
    post: operations["postV1Account"];
  };
  "/v1/gateway": {
    /**
     * Register new gateway 
     * @description Registers a new SMP gateway
     */
    post: operations["postV1Gateway"];
  };
  "/v1/token": {
    /**
     * Provision an access token 
     * @description Provisions a new access token for an account
     */
    post: operations["postV1Token"];
  };
  "/v1/verifyAccount": {
    /**
     * Verify IMAP and SMTP settings 
     * @description Checks if can connect and authenticate using provided account info
     */
    post: operations["postV1Verifyaccount"];
  };
  "/v1/authentication/form": {
    /**
     * Generate authentication link 
     * @description Generates a redirect link to the hosted authentication form
     */
    post: operations["postV1AuthenticationForm"];
  };
  "/v1/templates/template": {
    /**
     * Create template 
     * @description Create a new stored template. Templates can be used when sending emails as the content of the message.
     */
    post: operations["postV1TemplatesTemplate"];
  };
  "/v1/account/{account}/search": {
    /**
     * Search for messages 
     * @description Filter messages from a mailbox folder by search options. Search is performed against a specific folder and not for the entire account.
     */
    post: operations["postV1AccountAccountSearch"];
  };
  "/v1/account/{account}/mailbox": {
    /**
     * Rename mailbox 
     * @description Rename an existing mailbox folder
     */
    put: operations["putV1AccountAccountMailbox"];
    /**
     * Create mailbox 
     * @description Create new mailbox folder
     */
    post: operations["postV1AccountAccountMailbox"];
    /**
     * Delete mailbox 
     * @description Delete existing mailbox folder
     */
    delete: operations["deleteV1AccountAccountMailbox"];
  };
  "/v1/account/{account}/message": {
    /**
     * Upload message 
     * @description Upload a message structure, compile it into an EML file and store it into selected mailbox.
     */
    post: operations["postV1AccountAccountMessage"];
  };
  "/v1/account/{account}/submit": {
    /**
     * Submit message for delivery 
     * @description Submit message for delivery. If reference message ID is provided then EmailEngine adds all headers and flags required for a reply/forward automatically.
     */
    post: operations["postV1AccountAccountSubmit"];
  };
  "/v1/delivery-test/account/{account}": {
    /**
     * Create delivery test 
     * @description Initiate a delivery test
     */
    post: operations["postV1DeliverytestAccountAccount"];
  };
  "/v1/outbox/{queueId}": {
    /**
     * Remove a message 
     * @description Remove a message from the outbox
     */
    delete: operations["deleteV1OutboxQueueid"];
  };
  "/v1/token/{token}": {
    /**
     * Remove a token 
     * @description Delete an access token
     */
    delete: operations["deleteV1TokenToken"];
  };
  "/v1/templates/account/{account}": {
    /**
     * Flush templates 
     * @description Delete all stored templates for an account
     */
    delete: operations["deleteV1TemplatesAccountAccount"];
  };
  "/v1/account/{account}/reconnect": {
    /**
     * Request reconnect 
     * @description Requests connection to be reconnected
     */
    put: operations["putV1AccountAccountReconnect"];
  };
  "/v1/account/{account}/sync": {
    /**
     * Request syncing 
     * @description Requests account syncing to be run immediatelly
     */
    put: operations["putV1AccountAccountSync"];
  };
  "/v1/gateway/edit/{gateway}": {
    /**
     * Update gateway info 
     * @description Updates gateway information
     */
    put: operations["putV1GatewayEditGateway"];
  };
  "/v1/account/{account}/messages/move": {
    /**
     * Move messages 
     * @description Move messages matching to a search query to another folder
     */
    put: operations["putV1AccountAccountMessagesMove"];
  };
  "/v1/account/{account}/messages/delete": {
    /**
     * Delete messages 
     * @description Move messages to Trash or delete these if already in Trash
     */
    put: operations["putV1AccountAccountMessagesDelete"];
  };
  "/v1/account/{account}/message/{message}/move": {
    /**
     * Move message 
     * @description Move message to another folder
     */
    put: operations["putV1AccountAccountMessageMessageMove"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description List of requested OAuth2 scopes */
    scopes: (string)[];
    /**
     * @description Server response 
     * @example {
     *   "error": "invalid_grant",
     *   "error_description": "Bad Request"
     * }
     */
    response: Record<string, never>;
    /** @description OAuth2 error info if token request failed */
    tokenRequest: {
      /**
       * @description Requested grant type 
       * @example refresh_token 
       * @enum {string}
       */
      grant?: "refresh_token" | "authorization_code";
      /**
       * @description OAuth2 provider 
       * @example gmail
       */
      provider?: string;
      /**
       * @description HTTP status code for the OAuth2 request 
       * @example 400
       */
      status?: number;
      /**
       * @description OAuth2 client ID used to authenticate this request 
       * @example 1023289917884-h3nu00e9cb7h252e24c23sv19l8k57ah.apps.googleusercontent.com
       */
      clientId?: string;
      scopes?: components["schemas"]["scopes"];
      response?: components["schemas"]["response"];
    };
    AccountErrorEntry: {
      /** @example Token request failed */
      response?: string;
      /** @example OauthRenewError */
      serverResponseCode?: string;
      tokenRequest?: components["schemas"]["tokenRequest"];
    };
    AccountResponseItem: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Display name for the account 
       * @example My Email Account
       */
      name?: string;
      /**
       * @description Default email address of the account 
       * @example user@example.com
       */
      email?: string;
      /**
       * @description Account state 
       * @example connected 
       * @enum {string}
       */
      state: "init" | "syncing" | "connecting" | "connected" | "authenticationError" | "connectError" | "unset" | "disconnected";
      /**
       * @description Account-specific webhook URL 
       * @example https://myservice.com/imap/webhooks
       */
      webhooks?: string;
      /**
       * @description Proxy URL 
       * @example socks://proxy.example.com:1080
       */
      proxy?: string;
      /**
       * Format: date-time 
       * @description Last sync time 
       * @example 2021-02-17T13:43:18.860Z
       */
      syncTime?: string;
      lastError?: components["schemas"]["AccountErrorEntry"];
    };
    AccountEntries: (components["schemas"]["AccountResponseItem"])[];
    AccountsFilterResponse: {
      /**
       * @description How many matching entries 
       * @example 120
       */
      total?: number;
      /**
       * @description Current page (0-based index) 
       * @example 0
       */
      page?: number;
      /**
       * @description Total page count 
       * @example 24
       */
      pages?: number;
      accounts?: components["schemas"]["AccountEntries"];
    };
    DetectedAuthenticationInfo: {
      /**
       * @description Account username 
       * @example myuser@gmail.com
       */
      user?: string;
    };
    ResolvedServerSettings: {
      auth?: components["schemas"]["DetectedAuthenticationInfo"];
      /**
       * @description Hostname to connect to 
       * @example imap.gmail.com
       */
      host: string;
      /**
       * @description Service port number 
       * @example 993
       */
      port: number;
      /**
       * @description Should connection use TLS. Usually true for port 993 
       * @default false 
       * @example true
       */
      secure?: boolean;
    };
    DiscoveredEmailSettings: {
      imap?: components["schemas"]["ResolvedServerSettings"];
      smtp?: components["schemas"]["ResolvedServerSettings"];
      /**
       * @description Source for the detected info 
       * @example srv
       */
      _source?: string;
    };
    BlocklistsResponseItem: {
      /**
       * @description List ID 
       * @example example
       */
      listId: string;
      /**
       * @description Count of blocked addresses in this list 
       * @example 12
       */
      count?: number;
    };
    BlocklistsEntries: (components["schemas"]["BlocklistsResponseItem"])[];
    BlocklistsResponse: {
      /**
       * @description How many matching entries 
       * @example 120
       */
      total?: number;
      /**
       * @description Current page (0-based index) 
       * @example 0
       */
      page?: number;
      /**
       * @description Total page count 
       * @example 24
       */
      pages?: number;
      blocklists?: components["schemas"]["BlocklistsEntries"];
    };
    GatewayResponseItem: {
      /**
       * @description Gateway ID 
       * @example example
       */
      gateway: string;
      /**
       * @description Display name for the gateway 
       * @example My Email Gateway
       */
      name?: string;
      /**
       * @description Count of email deliveries using this gateway 
       * @example 100
       */
      deliveries?: number;
      /**
       * Format: date-time 
       * @description Last delivery time 
       * @example 2021-02-17T13:43:18.860Z
       */
      lastUse?: string;
      lastError?: components["schemas"]["AccountErrorEntry"];
    };
    GatewayEntries: (components["schemas"]["GatewayResponseItem"])[];
    GatewaysFilterResponse: {
      /**
       * @description How many matching entries 
       * @example 120
       */
      total?: number;
      /**
       * @description Current page (0-based index) 
       * @example 0
       */
      page?: number;
      /**
       * @description Total page count 
       * @example 24
       */
      pages?: number;
      gateways?: components["schemas"]["GatewayEntries"];
    };
    /** @enum {object} */
    LicenseDetails: false;
    LicenseResponse: {
      /**
       * @description Is there an active license registered 
       * @example true
       */
      active?: boolean;
      /**
       * @description Active license type 
       * @example EmailEngine License
       */
      type?: string;
      details?: components["schemas"]["LicenseDetails"];
      /**
       * @description Are email connections closed 
       * @example false
       */
      suspended?: boolean;
    };
    OAuth2ResponseItem: {
      /**
       * @description OAuth2 application ID 
       * @example AAABhaBPHscAAAAH
       */
      id: string;
      /**
       * @description Display name for the app 
       * @example My OAuth2 App
       */
      name?: string;
      /**
       * @description OAuth2 application description 
       * @example App description
       */
      description?: string;
      /**
       * @description OAuth2 provider 
       * @example gmail 
       * @enum {string}
       */
      provider: "gmail" | "gmailService" | "outlook" | "mailRu";
      /**
       * @description Is the application enabled 
       * @example true
       */
      enabled?: boolean;
      /**
       * @description `true` for older OAuth2 apps set via the settings endpoint 
       * @example true
       */
      legacy?: boolean;
      /**
       * Format: date-time 
       * @description The time this entry was added 
       * @example 2021-02-17T13:43:18.860Z
       */
      created: string;
      /**
       * Format: date-time 
       * @description The time this entry was updated 
       * @example 2021-02-17T13:43:18.860Z
       */
      updated?: string;
      /**
       * @description Is the application listed in the hosted authentication form 
       * @example true
       */
      includeInListing?: boolean;
      /**
       * @description Client or Application ID for 3-legged OAuth2 applications 
       * @example 4f05f488-d858-4f2c-bd12-1039062612fe
       */
      clientId?: string;
      /**
       * @description Client secret for 3-legged OAuth2 applications. Actual value is not revealed. 
       * @enum {string}
       */
      clientSecret?: "******";
      /**
       * @description Authorization tenant value for Outlook OAuth2 applications 
       * @example common
       */
      authority?: string;
      /**
       * @description Redirect URL for 3-legged OAuth2 applications 
       * @example https://myservice.com/oauth
       */
      redirectUrl?: string;
      /**
       * @description Service client ID for 2-legged OAuth2 applications 
       * @example 9103965568215821627203
       */
      serviceClient?: string;
      /**
       * @description PEM formatted service secret for 2-legged OAuth2 applications. Actual value is not revealed. 
       * @enum {string}
       */
      serviceKey?: "******";
      lastError?: components["schemas"]["AccountErrorEntry"];
    };
    OAuth2Entries: (components["schemas"]["OAuth2ResponseItem"])[];
    OAuth2FilterResponse: {
      /**
       * @description How many matching entries 
       * @example 120
       */
      total?: number;
      /**
       * @description Current page (0-based index) 
       * @example 0
       */
      page?: number;
      /**
       * @description Total page count 
       * @example 24
       */
      pages?: number;
      apps?: components["schemas"]["OAuth2Entries"];
    };
    to: (string)[];
    /** @description SMTP envelope */
    envelope: {
      /** @example sender@example.com */
      from?: string;
      to?: components["schemas"]["to"];
    };
    /** @description Error information if state=error */
    OutboxListProgressError: {
      /**
       * @description Error message 
       * @example Authentication failed
       */
      message?: string;
      /**
       * @description Error code 
       * @example EAUTH
       */
      code?: string;
      /**
       * @description SMTP response code 
       * @example 502
       */
      statusCode?: string;
    };
    OutboxListProgress: {
      /**
       * @description Current state of the sending 
       * @example queued 
       * @enum {string}
       */
      status?: "queued" | "processing" | "submitted" | "error";
      /**
       * @description Response from the SMTP server. Only if state=processing 
       * @example 250 Message Accepted
       */
      response?: string;
      error?: components["schemas"]["OutboxListProgressError"];
    };
    OutboxListItem: {
      /**
       * @description Outbox queue ID 
       * @example 1869c5692565f756b33
       */
      queueId?: string;
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description How this message was added to the queue 
       * @example smtp 
       * @enum {string}
       */
      source?: "smtp" | "api";
      /**
       * @description Message ID 
       * @example <test123@example.com>
       */
      messageId?: string;
      envelope?: components["schemas"]["envelope"];
      /**
       * @description Message subject 
       * @example What a wonderful message
       */
      subject?: string;
      /**
       * Format: date-time 
       * @description The time this message was queued 
       * @example 2021-02-17T13:43:18.860Z
       */
      created?: string;
      /**
       * Format: date-time 
       * @description When this message is supposed to be delivered 
       * @example 2021-02-17T13:43:18.860Z
       */
      scheduled?: string;
      /**
       * Format: date-time 
       * @description Next delivery attempt 
       * @example 2021-02-17T13:43:18.860Z
       */
      nextAttempt?: string;
      /**
       * @description How many times EmailEngine has tried to deliver this email 
       * @example 3
       */
      attemptsMade?: number;
      /**
       * @description How many delivery attempts to make until message is considered as failed 
       * @example 3
       */
      attempts?: number;
      progress?: components["schemas"]["OutboxListProgress"];
    };
    OutboxListEntries: (components["schemas"]["OutboxListItem"])[];
    OutboxListResponse: {
      /**
       * @description How many matching entries 
       * @example 120
       */
      total?: number;
      /**
       * @description Current page (0-based index) 
       * @example 0
       */
      page?: number;
      /**
       * @description Total page count 
       * @example 24
       */
      pages?: number;
      messages?: components["schemas"]["OutboxListEntries"];
    };
    webhookEvents: (string)[];
    WebhooksCustomHeader: {
      key: string;
      /** @default */
      value?: string;
    };
    WebhooksCustomHeaders: (components["schemas"]["WebhooksCustomHeader"])[];
    notifyHeaders: (string)[];
    /** @description Gmail OAuth2 Extra Scopes (deprecated) */
    gmailExtraScopes: (string)[];
    /** @description Outlook OAuth2 Extra Scopes (deprecated) */
    outlookExtraScopes: (string)[];
    /** @description Mail.ru OAuth2 Extra Scopes (deprecated) */
    mailRuExtraScopes: (string)[];
    /** @description OAuth2 Service Extra Scopes (deprecated) */
    serviceExtraScopes: (string)[];
    LogSettings: {
      /**
       * @description Enable logs for all accounts 
       * @default false 
       * @example false
       */
      all?: boolean;
      maxLogLines?: number;
    };
    /** @description A list of pooled local IP addresses that can be used for IMAP and SMTP connections */
    localAddresses: (string)[];
    SettingsQueryResponse: {
      /** @description If false then do not emit webhooks */
      webhooksEnabled?: boolean;
      /**
       * @description Webhook URL 
       * @example https://myservice.com/imap/webhooks
       */
      webhooks?: string;
      webhookEvents?: components["schemas"]["webhookEvents"];
      webhooksCustomHeaders?: components["schemas"]["WebhooksCustomHeaders"];
      notifyHeaders?: components["schemas"]["notifyHeaders"];
      /**
       * @description Base URL of EmailEngine 
       * @example https://emailengine.example.com
       */
      serviceUrl?: string;
      /** @description If true, then rewrite html links in sent emails to track opens and clicks */
      trackSentMessages?: boolean;
      /** @description If true, then resolve the category tab for incoming emails */
      resolveGmailCategories?: boolean;
      /** @description If true, then send "New Email" webhooks for incoming emails only */
      inboxNewOnly?: boolean;
      /**
       * @description HMAC secret for signing public requests 
       * @example verysecr8t
       */
      serviceSecret?: string;
      /**
       * @description URL to fetch authentication data from 
       * @example https://myservice.com/authentication
       */
      authServer?: string;
      /** @description Is the global proxy enabled or not */
      proxyEnabled?: boolean;
      /**
       * @description Proxy URL 
       * @example socks://proxy.example.com:1080
       */
      proxyUrl?: string;
      /** @description Include message text in webhook notification */
      notifyText?: boolean;
      notifyTextSize?: number;
      /** @description If true then do not show Gmail account option (deprecated) */
      gmailEnabled?: boolean;
      /** @description Gmail OAuth2 Client ID (deprecated) */
      gmailClientId?: string;
      /** @description Gmail OAuth2 Client Secret (deprecated) */
      gmailClientSecret?: string;
      /** @description Gmail OAuth2 Callback URL (deprecated) */
      gmailRedirectUrl?: string;
      gmailExtraScopes?: components["schemas"]["gmailExtraScopes"];
      /** @description If true then do not show Outlook account option (deprecated) */
      outlookEnabled?: boolean;
      /** @description Outlook OAuth2 Client ID (deprecated) */
      outlookClientId?: string;
      /** @description Outlook OAuth2 Client Secret (deprecated) */
      outlookClientSecret?: string;
      /** @description Outlook OAuth2 Callback URL (deprecated) */
      outlookRedirectUrl?: string;
      /**
       * @description Outlook OAuth2 authority (deprecated) 
       * @example consumers 
       * @enum {string}
       */
      outlookAuthority?: "consumers" | "organizations" | "common";
      outlookExtraScopes?: components["schemas"]["outlookExtraScopes"];
      /** @description If true then do not show Mail.ru account option (deprecated) */
      mailRuEnabled?: boolean;
      /** @description Mail.ru OAuth2 Client ID (deprecated) */
      mailRuClientId?: string;
      /** @description Mail.ru OAuth2 Client Secret (deprecated) */
      mailRuClientSecret?: string;
      /** @description Mail.ru OAuth2 Callback URL (deprecated) */
      mailRuRedirectUrl?: string;
      mailRuExtraScopes?: components["schemas"]["mailRuExtraScopes"];
      /** @description OAuth2 Service Client ID (deprecated) */
      serviceClient?: string;
      /** @description OAuth2 Secret Service Key (deprecated) */
      serviceKey?: string;
      serviceExtraScopes?: components["schemas"]["serviceExtraScopes"];
      logs?: components["schemas"]["LogSettings"];
      /**
       * @description How to select local IP address for IMAP connections 
       * @enum {string}
       */
      imapStrategy?: "default" | "dedicated" | "random";
      /**
       * @description How to select local IP address for SMTP connections 
       * @enum {string}
       */
      smtpStrategy?: "default" | "dedicated" | "random";
      localAddresses?: components["schemas"]["localAddresses"];
      /** @description Enable SMTP Interface */
      smtpServerEnabled?: boolean;
      /** @description SMTP Interface Port */
      smtpServerPort?: number;
      /** @description SMTP Host to bind to */
      smtpServerHost?: string;
      /** @description Enable PROXY Protocol for SMTP server */
      smtpServerProxy?: boolean;
      /** @description Enable SMTP authentication */
      smtpServerAuthEnabled?: boolean;
      /** @description SMTP client password. Set to null to disable. */
      smtpServerPassword?: string;
      /** @description Enable TLS for the SMTP interface. Requires a valid certificate. */
      smtpServerTLSEnabled?: boolean;
      /** @description Enable IMAP Proxy Interface */
      imapProxyServerEnabled?: boolean;
      /** @description IMAP Proxy Interface Port */
      imapProxyServerPort?: number;
      /** @description IMAP Proxy Host to bind to */
      imapProxyServerHost?: string;
      /** @description Enable PROXY Protocol for the IMAP proxy server */
      imapProxyServerProxy?: boolean;
      /** @description IMAP proxy client password. Set to null to disable. */
      imapProxyServerPassword?: string;
      /** @description Enable TLS for the IMAP proxy interface. Requires a valid certificate. */
      imapProxyServerTLSEnabled?: boolean;
      /** @description How many completed or failed queue entries to keep */
      queueKeep?: number;
      /** @description HTML code displayed on the top of public pages like the hosted authentication form */
      templateHeader?: string;
      /** @description Enable support for reverse proxies */
      enableApiProxy?: boolean;
      /** @description Enable Document Store syncing */
      documentStoreEnabled?: boolean;
      /**
       * @description Document Store URL 
       * @example https://localhost:9200
       */
      documentStoreUrl?: string;
      /** @description Document Store index name */
      documentStoreIndex?: string;
      /** @description Enable Document Store authentication */
      documentStoreAuthEnabled?: boolean;
      /** @description Document Store username */
      documentStoreUsername?: string;
      /** @description Document Store password */
      documentStorePassword?: string;
      /** @description Enable Document Store pre-processing */
      documentStorePreProcessingEnabled?: boolean;
      /**
       * @description Default locale identifier 
       * @example fr 
       * @enum {string}
       */
      locale?: "en" | "et" | "fr";
      /**
       * @description Default timezone identifier 
       * @example Europe/Tallinn
       */
      timezone?: string;
    };
    /** @description Counts of accounts in different connection states */
    ConnectionsStats: {
      /**
       * @description Accounts not yet initialized 
       * @example 2
       */
      init?: number;
      /**
       * @description Successfully connected accounts 
       * @example 8
       */
      connected?: number;
      /**
       * @description Connection is being established 
       * @example 7
       */
      connecting?: number;
      /**
       * @description Authentication failed 
       * @example 3
       */
      authenticationError?: number;
      /**
       * @description Connection failed due to technical error 
       * @example 5
       */
      connectError?: number;
      /**
       * @description Accounts without valid IMAP settings 
       * @example 0
       */
      unset?: number;
      /**
       * @description IMAP connection was closed 
       * @example 1
       */
      disconnected?: number;
    };
    CounterStats: Record<string, never>;
    SettingsResponse: {
      /**
       * @description EmailEngine version number 
       * @example 2.29.2
       */
      version?: string;
      /**
       * @description EmailEngine license 
       * @example LICENSE_EMAILENGINE
       */
      license?: string;
      /**
       * @description Number of registered accounts 
       * @example 26
       */
      accounts?: number;
      /**
       * @description Node.js Version 
       * @example 16.10.0
       */
      node?: string;
      /**
       * @description Redis Version 
       * @example 6.2.4
       */
      redis?: string;
      connections?: components["schemas"]["ConnectionsStats"];
      counters?: components["schemas"]["CounterStats"];
    };
    AccountTemplate: {
      /**
       * @description Template ID 
       * @example AAABgS-UcAYAAAABAA
       */
      id: string;
      /**
       * @description Name of the template 
       * @example Transaction receipt
       */
      name: string;
      /**
       * @description Optional description of the template 
       * @example Something about the template
       */
      description?: string;
      /**
       * @description Markup language for HTML ("html", "markdown" or "mjml") 
       * @default html 
       * @enum {string}
       */
      format?: "html" | "mjml" | "markdown";
      /**
       * Format: date-time 
       * @description The time this template was created 
       * @example 2021-02-17T13:43:18.860Z
       */
      created?: string;
      /**
       * Format: date-time 
       * @description The time this template was last updated 
       * @example 2021-02-17T13:43:18.860Z
       */
      updated?: string;
    };
    AccountTemplatesList: (components["schemas"]["AccountTemplate"])[];
    AccountTemplatesResponse: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description How many matching entries 
       * @example 120
       */
      total?: number;
      /**
       * @description Current page (0-based index) 
       * @example 0
       */
      page?: number;
      /**
       * @description Total page count 
       * @example 24
       */
      pages?: number;
      templates?: components["schemas"]["AccountTemplatesList"];
    };
    Model1: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Token description 
       * @example Token description
       */
      description: string;
      /**
       * @description Related metadata in JSON format 
       * @example {"example": "value"}
       */
      metadata?: string;
      /**
       * @description IP address of the requestor 
       * @example 127.0.0.1
       */
      ip?: string;
    };
    Model2: (components["schemas"]["Model1"])[];
    Model3: {
      tokens?: components["schemas"]["Model2"];
    };
    /**
     * @description Authentication info 
     * @enum {object}
     */
    Authentication: false;
    /** @description Optional TLS configuration */
    TLS: {
      /**
       * @description How to treat invalid certificates 
       * @default true 
       * @example true
       */
      rejectUnauthorized?: boolean;
      /**
       * @description Minimal TLS version 
       * @example TLSv1.2
       */
      minVersion?: string;
    };
    /** @description IMAP configuration */
    IMAPResponse: {
      auth?: components["schemas"]["Authentication"];
      /**
       * @description Set to true to use authentication server instead of username/password 
       * @example false
       */
      useAuthServer?: boolean;
      /**
       * @description Hostname to connect to 
       * @example imap.gmail.com
       */
      host?: string;
      /**
       * @description Service port number 
       * @example 993
       */
      port?: number;
      /**
       * @description Should connection use TLS. Usually true for port 993 
       * @default false 
       * @example true
       */
      secure?: boolean;
      tls?: components["schemas"]["TLS"];
      /**
       * @description Full resync delay in seconds 
       * @example 900
       */
      resyncDelay?: number;
      /**
       * @description Set to true to disable IMAP handling 
       * @example false
       */
      disabled?: boolean;
      /**
       * @description Upload sent message to this folder. By default the account's Sent Mail folder is used. Set to `null` to unset. 
       * @example Sent Mail
       */
      sentMailPath?: string;
      /**
       * @description Folder for drafts. By default the account's Draft Mail folder is used. Set to `null` to unset. 
       * @example Drafts
       */
      draftsMailPath?: string;
      /**
       * @description Folder for spam. By default the account's Junk Mail folder is used. Set to `null` to unset. 
       * @example Drafts
       */
      junkMailPath?: string;
      /**
       * @description Folder for deleted emails. By default the account's Trash folder is used. Set to `null` to unset. 
       * @example Drafts
       */
      trashMailPath?: string;
    };
    /** @description SMTP configuration */
    SMTPResponse: {
      auth?: components["schemas"]["Authentication"];
      /**
       * @description Set to true to use authentication server instead of username/password 
       * @example false
       */
      useAuthServer?: boolean;
      /**
       * @description Hostname to connect to 
       * @example smtp.gmail.com
       */
      host: string;
      /**
       * @description Service port number 
       * @example 587
       */
      port: number;
      /**
       * @description Should connection use TLS. Usually true for port 465 
       * @default false 
       * @example false
       */
      secure?: boolean;
      tls?: components["schemas"]["TLS"];
    };
    AccountResponse: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Display name for the account 
       * @example My Email Account
       */
      name: string;
      /**
       * @description Default email address of the account 
       * @example user@example.com
       */
      email?: string;
      /**
       * @description Copy submitted messages to Sent folder 
       * @example true
       */
      copy?: boolean;
      /**
       * @description Store recent logs 
       * @example false
       */
      logs?: boolean;
      /**
       * Format: date-time 
       * @description Send webhooks for messages starting from provided date. The default is the account creation date. 
       * @example 2021-07-08T07:06:34.336Z
       */
      notifyFrom?: string;
      /**
       * Format: date-time 
       * @description Sync messages to document store starting from provided date. If not set, all emails are synced. 
       * @example 2021-07-08T07:06:34.336Z
       */
      syncFrom?: string;
      /**
       * @description Account-specific webhook URL 
       * @example https://myservice.com/imap/webhooks
       */
      webhooks?: string;
      /**
       * @description Proxy URL 
       * @example socks://proxy.example.com:1080
       */
      proxy?: string;
      imap?: components["schemas"]["IMAPResponse"];
      smtp?: components["schemas"]["SMTPResponse"];
      lastError?: components["schemas"]["AccountErrorEntry"];
    };
    BlocklistListResponseItem: {
      /**
       * @description Listed email address 
       * @example user@example.com
       */
      recipient: string;
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Message ID 
       * @example <test123@example.com>
       */
      messageId?: string;
      /**
       * @description Which mechanism was used to add the entry 
       * @example api
       */
      source?: string;
      /**
       * @description Why this entry was added 
       * @example api
       */
      reason?: string;
      /** @description Which IP address triggered the entry */
      remoteAddress?: string;
      /**
       * @description Which user agent triggered the entry 
       * @example Mozilla/5.0 (Macintosh)
       */
      userAgent?: string;
      /**
       * Format: date-time 
       * @description The time this entry was added or updated 
       * @example 2021-02-17T13:43:18.860Z
       */
      created: string;
    };
    BlocklistListEntries: (components["schemas"]["BlocklistListResponseItem"])[];
    BlocklistListResponse: {
      /**
       * @description List ID 
       * @example example
       */
      listId: string;
      /**
       * @description How many matching entries 
       * @example 120
       */
      total?: number;
      /**
       * @description Current page (0-based index) 
       * @example 0
       */
      page?: number;
      /**
       * @description Total page count 
       * @example 24
       */
      pages?: number;
      addresses?: components["schemas"]["BlocklistListEntries"];
    };
    GatewayResponse: {
      /**
       * @description Gateway ID 
       * @example example
       */
      gateway: string;
      /**
       * @description Display name for the gateway 
       * @example My Email Gateway
       */
      name: string;
      /**
       * @description Count of email deliveries using this gateway 
       * @example 100
       */
      deliveries?: number;
      /**
       * Format: date-time 
       * @description Last delivery time 
       * @example 2021-02-17T13:43:18.860Z
       */
      lastUse?: string;
      user?: string;
      pass?: string;
      /**
       * @description Hostname to connect to 
       * @example smtp.gmail.com
       */
      host?: string;
      /**
       * @description Service port number 
       * @example 465
       */
      port?: number;
      /**
       * @description Should connection use TLS. Usually true for port 465 
       * @default false 
       * @example true
       */
      secure?: boolean;
      lastError?: components["schemas"]["AccountErrorEntry"];
    };
    ApplicationResponse: {
      /**
       * @description OAuth2 application ID 
       * @example AAABhaBPHscAAAAH
       */
      id: string;
      /**
       * @description Display name for the app 
       * @example My OAuth2 App
       */
      name?: string;
      /**
       * @description OAuth2 application description 
       * @example App description
       */
      description?: string;
      /**
       * @description OAuth2 provider 
       * @example gmail 
       * @enum {string}
       */
      provider: "gmail" | "gmailService" | "outlook" | "mailRu";
      /**
       * @description Is the application enabled 
       * @example true
       */
      enabled?: boolean;
      /**
       * @description `true` for older OAuth2 apps set via the settings endpoint 
       * @example true
       */
      legacy?: boolean;
      /**
       * Format: date-time 
       * @description The time this entry was added 
       * @example 2021-02-17T13:43:18.860Z
       */
      created: string;
      /**
       * Format: date-time 
       * @description The time this entry was updated 
       * @example 2021-02-17T13:43:18.860Z
       */
      updated?: string;
      /**
       * @description Is the application listed in the hosted authentication form 
       * @example true
       */
      includeInListing?: boolean;
      /**
       * @description Client or Application ID for 3-legged OAuth2 applications 
       * @example 4f05f488-d858-4f2c-bd12-1039062612fe
       */
      clientId?: string;
      /**
       * @description Client secret for 3-legged OAuth2 applications. Actual value is not revealed. 
       * @enum {string}
       */
      clientSecret?: "******";
      /**
       * @description Authorization tenant value for Outlook OAuth2 applications 
       * @example common
       */
      authority?: string;
      /**
       * @description Redirect URL for 3-legged OAuth2 applications 
       * @example https://myservice.com/oauth
       */
      redirectUrl?: string;
      /**
       * @description Service client ID for 2-legged OAuth2 applications 
       * @example 9103965568215821627203
       */
      serviceClient?: string;
      /**
       * @description PEM formatted service secret for 2-legged OAuth2 applications. Actual value is not revealed. 
       * @enum {string}
       */
      serviceKey?: "******";
      /**
       * @description The number of accounts registered with this application. Not available for legacy apps. 
       * @example 12
       */
      accounts?: number;
      lastError?: components["schemas"]["AccountErrorEntry"];
    };
    /**
     * @example {
     *   "name": "From Me",
     *   "address": "sender@example.com"
     * }
     */
    Address: {
      /** @example Some Name */
      name?: string;
      /** @example user@example.com */
      address: string;
    };
    Model4: {
      /** @example Some Name */
      name?: string;
      /** @example user@example.com */
      address: string;
    };
    /**
     * @description List of addresses 
     * @example [
     *   {
     *     "address": "recipient@example.com"
     *   }
     * ]
     */
    AddressList: (components["schemas"]["Model4"])[];
    /** @description List of addresses */
    Model5: (components["schemas"]["Model4"])[];
    /** @description IMAP flags */
    FlagList: (string)[];
    /** @description Gmail labels */
    LabelList: (string)[];
    Model6: {
      /**
       * @description Attachment ID 
       * @example AAAAAgAACrIyLjI
       */
      id?: string;
      /**
       * @description Mime type of the attachment 
       * @example image/gif
       */
      contentType?: string;
      /**
       * @description Encoded size of the attachment. Actual file size is usually smaller depending on the encoding 
       * @example 48
       */
      encodedSize?: number;
      /**
       * @description Is this image used in HTML img tag 
       * @example true
       */
      embedded?: boolean;
      /**
       * @description Should this file be included in the message preview somehow 
       * @example true
       */
      inline?: boolean;
      /**
       * @description Usually used only for embedded images 
       * @example <unique-image-id@localhost>
       */
      contentId?: string;
    };
    /** @description List of attachments */
    AttachmentList: (components["schemas"]["Model6"])[];
    /** @description Encoded message part sizes */
    encodedSize: {
      /**
       * @description How many bytes for plain text 
       * @example 1013
       */
      plain?: number;
      /**
       * @description How many bytes for html content 
       * @example 1013
       */
      html?: number;
    };
    TextInfo: {
      /**
       * @description Pointer to message text content 
       * @example AAAAAgAACqiTkaExkaEykA
       */
      id?: string;
      encodedSize?: components["schemas"]["encodedSize"];
    };
    MessageListEntry: {
      /**
       * @description Message ID 
       * @example AAAAAgAACrI
       */
      id?: string;
      /**
       * @description UID of the message 
       * @example 12345
       */
      uid?: number;
      /**
       * @description Globally unique ID (if server supports it) 
       * @example 1694937972638499881
       */
      emailId?: string;
      /**
       * @description Thread ID (if server supports it) 
       * @example 1694936993596975454
       */
      threadId?: string;
      /**
       * Format: date-time 
       * @description Date (internal) 
       * @example 2021-03-22T13:13:31.000Z
       */
      date?: string;
      /**
       * @description Is this message marked as a draft 
       * @example false
       */
      draft?: boolean;
      /**
       * @description Is this message unseen 
       * @example true
       */
      unseen?: boolean;
      /**
       * @description Is this message marked as flagged 
       * @example true
       */
      flagged?: boolean;
      /**
       * @description Message size in bytes 
       * @example 1040
       */
      size?: number;
      /**
       * @description Message subject (decoded into unicode, applies to other string values as well) 
       * @example What a wonderful message
       */
      subject?: string;
      from?: components["schemas"]["Address"];
      replyTo?: components["schemas"]["AddressList"];
      to?: components["schemas"]["AddressList"];
      cc?: components["schemas"]["Model5"];
      bcc?: components["schemas"]["Model5"];
      /**
       * @description Message ID 
       * @example <test123@example.com>
       */
      messageId?: string;
      /**
       * @description Replied Message ID 
       * @example <7JBUMt0WOn+_==MOkaCOQ@mail.gmail.com>
       */
      inReplyTo?: string;
      flags?: components["schemas"]["FlagList"];
      labels?: components["schemas"]["LabelList"];
      attachments?: components["schemas"]["AttachmentList"];
      text?: components["schemas"]["TextInfo"];
      /** @description Text preview for messages loaded from Document Store */
      preview?: string;
    };
    PageMessages: (components["schemas"]["MessageListEntry"])[];
    MessageList: {
      /**
       * @description How many matching entries 
       * @example 120
       */
      total?: number;
      /**
       * @description Current page (0-based index) 
       * @example 0
       */
      page?: number;
      /**
       * @description Total page count 
       * @example 24
       */
      pages?: number;
      messages?: components["schemas"]["PageMessages"];
    };
    /** @description Optional counters info */
    MailboxResponseStatus: {
      /**
       * @description Count of messages in mailbox as reported by the STATUS command 
       * @example 120
       */
      messages?: number;
      /**
       * @description Count of unseen messages in mailbox as reported by the STATUS command 
       * @example 120
       */
      unseen?: number;
    };
    MailboxResponseItem: {
      /**
       * @description Full path to mailbox 
       * @example Kalender/S&APw-nnip&AOQ-evad
       */
      path: string;
      /** @example / */
      delimiter?: string;
      /**
       * @description Full path to parent mailbox 
       * @example Kalender
       */
      parentPath: string;
      /**
       * @description Maibox name 
       * @example Sünnipäevad
       */
      name: string;
      /**
       * @description Was the mailbox found from the output of LIST command 
       * @example true
       */
      listed?: boolean;
      /**
       * @description Was the mailbox found from the output of LSUB command 
       * @example true
       */
      subscribed?: boolean;
      /**
       * @description Special use flag of the mailbox if set 
       * @example \Sent 
       * @enum {string}
       */
      specialUse?: "\All" | "\Archive" | "\Drafts" | "\Flagged" | "\Junk" | "\Sent" | "\Trash" | "\Inbox";
      /**
       * @description Count of messages in mailbox 
       * @example 120
       */
      messages?: number;
      /**
       * @description Next expected UID 
       * @example 121
       */
      uidNext?: number;
      status?: components["schemas"]["MailboxResponseStatus"];
    };
    mailboxes: (components["schemas"]["MailboxResponseItem"])[];
    MailboxesFilterResponse: {
      mailboxes?: components["schemas"]["mailboxes"];
    };
    AccountTokenResponse: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Username 
       * @example user@example.com
       */
      user: string;
      /**
       * @description Access Token 
       * @example aGVsbG8gd29ybGQ=
       */
      accessToken: string;
      /**
       * @description OAuth2 provider 
       * @example gmail
       */
      provider?: string;
    };
    /** @description DKIM results */
    dkim: Record<string, never>;
    /** @description SPF results */
    spf: Record<string, never>;
    /** @description DMARC results */
    dmarc: Record<string, never>;
    /** @description BIMI results */
    bimi: Record<string, never>;
    /** @description ARC results */
    arc: Record<string, never>;
    /** @description Primary DKIM signature. `status.aligned` should be set, otherwise DKIM check should not be considered as passed. */
    mainSig: Record<string, never>;
    DeliveryCheckResponse: {
      /**
       * @description Was the test completed 
       * @example true
       */
      success?: boolean;
      dkim?: components["schemas"]["dkim"];
      spf?: components["schemas"]["spf"];
      dmarc?: components["schemas"]["dmarc"];
      bimi?: components["schemas"]["bimi"];
      arc?: components["schemas"]["arc"];
      mainSig?: components["schemas"]["mainSig"];
    };
    RequestTemplateContent: {
      /**
       * @description Message subject 
       * @example What a wonderful message
       */
      subject?: string;
      /**
       * @description Message Text 
       * @example Hello from myself!
       */
      text?: string;
      /**
       * @description Message HTML 
       * @example <p>Hello from myself!</p>
       */
      html?: string;
      /**
       * @description Preview text appears in the inbox after the subject line 
       * @example Welcome to our newsletter!
       */
      previewText?: string;
      /**
       * @description Markup language for HTML ("html", "markdown" or "mjml") 
       * @default html 
       * @enum {string}
       */
      format?: "html" | "mjml" | "markdown";
    };
    AccountTemplateResponse: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Template ID 
       * @example AAABgS-UcAYAAAABAA
       */
      id: string;
      /**
       * @description Name of the template 
       * @example Transaction receipt
       */
      name: string;
      /**
       * @description Optional description of the template 
       * @example Something about the template
       */
      description?: string;
      /**
       * @description Markup language for HTML ("html", "markdown" or "mjml") 
       * @default html 
       * @enum {string}
       */
      format?: "html" | "mjml" | "markdown";
      /**
       * Format: date-time 
       * @description The time this template was created 
       * @example 2021-02-17T13:43:18.860Z
       */
      created?: string;
      /**
       * Format: date-time 
       * @description The time this template was last updated 
       * @example 2021-02-17T13:43:18.860Z
       */
      updated?: string;
      content?: components["schemas"]["RequestTemplateContent"];
    };
    /**
     * @description HTTP referrer allowlist 
     * @example [
     *   "*web.domain.org/*",
     *   "*.domain.org/*",
     *   "https://domain.org/*"
     * ]
     */
    ReferrerAllowlist: (string)[];
    /**
     * @description IP address allowlist 
     * @example [
     *   "1.2.3.4",
     *   "5.6.7.8",
     *   "127.0.0.0/8"
     * ]
     */
    AddressAllowlist: (string)[];
    /**
     * @description Access restrictions 
     * @enum {object}
     */
    TokenRestrictions: false;
    Model7: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Token description 
       * @example Token description
       */
      description: string;
      /**
       * @description Related metadata in JSON format 
       * @example {"example": "value"}
       */
      metadata?: string;
      restrictions?: components["schemas"]["TokenRestrictions"];
      /**
       * @description IP address of the requestor 
       * @example 127.0.0.1
       */
      ip?: string;
    };
    Model8: (components["schemas"]["Model7"])[];
    Model9: {
      tokens?: components["schemas"]["Model8"];
    };
    /**
     * @description Object where header key is object key and value is an array 
     * @example {
     *   "from": [
     *     "From Me <sender@example.com>"
     *   ],
     *   "subject": [
     *     "What a wonderful message"
     *   ]
     * }
     */
    MessageHeaders: Record<string, never>;
    Model10: {
      /**
       * @description Pointer to message text content. The value is `null` for messages retrieved from Document Store. 
       * @example AAAAAgAACqiTkaExkaEykA
       */
      id?: string;
      encodedSize?: components["schemas"]["encodedSize"];
      /**
       * @description Plaintext content of the message 
       * @example Hello from myself!
       */
      plain?: string;
      /**
       * @description HTML content of the message 
       * @example <p>Hello from myself!</p>
       */
      html?: string;
      /**
       * @description If partial message content was requested then this value indicates if it includes all the content or there is more 
       * @example false
       */
      hasMore?: boolean;
    };
    BounceResponse: {
      /** @example 550 5.1.1 No such user */
      message?: string;
      /** @example 5.1.1 */
      status?: string;
    };
    BounceEntry: {
      /**
       * @description Bounce email ID 
       * @example AAAAAQAACnA
       */
      message: string;
      /** @example recipient@example.com */
      recipient?: string;
      /** @example failed */
      action?: string;
      response?: components["schemas"]["BounceResponse"];
      /**
       * Format: date-time 
       * @description Time the bounce was registered by EmailEngine 
       * @example 2021-03-22T13:13:31.000Z
       */
      date?: string;
    };
    BounceList: (components["schemas"]["BounceEntry"])[];
    Model11: {
      /**
       * @description Message ID 
       * @example AAAAAgAACrI
       */
      id?: string;
      /**
       * @description UID of the message 
       * @example 12345
       */
      uid?: number;
      /**
       * @description Globally unique ID (if server supports it) 
       * @example 1694937972638499881
       */
      emailId?: string;
      /**
       * @description Thread ID (if server supports it). Always set for messages retrieved from Document Store. 
       * @example 1694936993596975454
       */
      threadId?: string;
      /**
       * Format: date-time 
       * @description Date (internal) 
       * @example 2021-03-22T13:13:31.000Z
       */
      date?: string;
      /**
       * @description Is this message marked as a draft 
       * @example false
       */
      draft?: boolean;
      /**
       * @description Is this message unseen 
       * @example true
       */
      unseen?: boolean;
      /**
       * @description Is this message marked as flagged 
       * @example true
       */
      flagged?: boolean;
      /**
       * @description Message size in bytes 
       * @example 1040
       */
      size?: number;
      /**
       * @description Message subject (decoded into unicode, applies to other string values as well) 
       * @example What a wonderful message
       */
      subject?: string;
      from?: components["schemas"]["Address"];
      sender?: components["schemas"]["Address"];
      to?: components["schemas"]["AddressList"];
      cc?: components["schemas"]["Model5"];
      bcc?: components["schemas"]["Model5"];
      replyTo?: components["schemas"]["AddressList"];
      /**
       * @description Message ID 
       * @example <test123@example.com>
       */
      messageId?: string;
      /**
       * @description Replied Message ID 
       * @example <7JBUMt0WOn+_==MOkaCOQ@mail.gmail.com>
       */
      inReplyTo?: string;
      flags?: components["schemas"]["FlagList"];
      labels?: components["schemas"]["LabelList"];
      attachments?: components["schemas"]["AttachmentList"];
      headers?: components["schemas"]["MessageHeaders"];
      text?: components["schemas"]["Model10"];
      bounces?: components["schemas"]["BounceList"];
      /**
       * @description True if this message was detected to be an autoreply email like the Out of Office notice 
       * @example false
       */
      isAutoReply?: boolean;
    };
    TextResponse: {
      /**
       * @description Plaintext content 
       * @example Hello world
       */
      plain?: string;
      /**
       * @description HTML content 
       * @example <p>Hello world</p>
       */
      html?: string;
      /**
       * @description Is the current text output capped or not 
       * @example false
       */
      hasMore?: boolean;
    };
    /**
     * @description IMAP configuration 
     * @enum {object}
     */
    IMAP: false;
    /**
     * @description SMTP configuration 
     * @enum {object}
     */
    SMTP: false;
    auth: {
      /**
       * @description Account username 
       * @example myuser@gmail.com
       */
      user: string;
    };
    /**
     * @description OAuth2 configuration 
     * @enum {object}
     */
    OAuth2: false;
    CreateAccount: {
      /**
       * @description Account ID. If the provided value is `null` then an unique ID will be autogenerated 
       * @example example
       */
      account: string;
      /**
       * @description Display name for the account 
       * @example My Email Account
       */
      name: string;
      /**
       * @description Default email address of the account 
       * @example user@example.com
       */
      email?: string;
      /**
       * @description Check changes only on selected path 
       * @default * 
       * @example INBOX
       */
      path?: string;
      /**
       * @description Account-specific webhook URL 
       * @example https://myservice.com/imap/webhooks
       */
      webhooks?: string;
      /**
       * @description Copy submitted messages to Sent folder. Set to `null` to unset and use provider specific default. 
       * @example false
       */
      copy?: boolean;
      /**
       * @description Store recent logs 
       * @default false 
       * @example false
       */
      logs?: boolean;
      /**
       * Format: date-time 
       * @description Send webhooks for messages starting from provided date. The default is the account creation date. 
       * @example 2021-07-08T07:06:34.336Z
       */
      notifyFrom?: string;
      /**
       * Format: date-time 
       * @description Sync messages to document store starting from provided date. If not set, all emails are synced. 
       * @example 2021-07-08T07:06:34.336Z
       */
      syncFrom?: string;
      /**
       * @description Proxy URL 
       * @example socks://proxy.example.com:1080
       */
      proxy?: string;
      imap?: components["schemas"]["IMAP"];
      smtp?: components["schemas"]["SMTP"];
      oauth2?: components["schemas"]["OAuth2"];
      /**
       * @description Optional locale 
       * @example fr
       */
      locale?: string;
      /**
       * @description Optional timezone 
       * @example Europe/Tallinn
       */
      tz?: string;
    };
    CreateAccountResponse: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Is the account new or updated existing 
       * @example new 
       * @enum {string}
       */
      state: "existing" | "new";
    };
    CreateGateway: {
      /**
       * @description Gateway ID 
       * @default null 
       * @example sendgun
       */
      gateway: string;
      /**
       * @description Account Name 
       * @example John Smith
       */
      name: string;
      /** @default null */
      user?: string;
      /** @default null */
      pass?: string;
      /**
       * @description Hostname to connect to 
       * @example smtp.gmail.com
       */
      host: string;
      /**
       * @description Service port number 
       * @example 465
       */
      port: number;
      /**
       * @description Should connection use TLS. Usually true for port 465 
       * @default false 
       * @example true
       */
      secure?: boolean;
    };
    CreateGatewayResponse: {
      /**
       * @description Gateway ID 
       * @example example
       */
      gateway: string;
      /**
       * @description Is the gateway new or updated existing 
       * @example new 
       * @enum {string}
       */
      state: "existing" | "new";
    };
    RegisterLicense: {
      /**
       * @description License file 
       * @example -----BEGIN LICENSE-----
       * ...
       */
      license: string;
    };
    extraScopes: (string)[];
    CreateOAuth2App: {
      /**
       * @description Application name 
       * @example My Gmail App
       */
      name: string;
      /**
       * @description Application description 
       * @example My cool app
       */
      description?: string;
      /**
       * @description OAuth2 provider 
       * @example gmail 
       * @enum {string}
       */
      provider: "gmail" | "gmailService" | "outlook" | "mailRu";
      /**
       * @description Enable this app 
       * @default false 
       * @example true
       */
      enabled?: boolean;
      /**
       * @description Client or Application ID for 3-legged OAuth2 applications 
       * @example 52422112755-3uov8bjwlrullq122rdm6l8ui25ho7qf.apps.googleusercontent.com
       */
      clientId?: string;
      /**
       * @description Client secret for 3-legged OAuth2 applications 
       * @example boT7Q~dUljnfFdVuqpC11g8nGMjO8kpRAv-ZB
       */
      clientSecret?: string;
      extraScopes?: components["schemas"]["extraScopes"];
      /**
       * @description Service client ID for 2-legged OAuth2 applications 
       * @example 7103296518315821565203
       */
      serviceClient: string;
      /**
       * @description PEM formatted service secret for 2-legged OAuth2 applications 
       * @example -----BEGIN PRIVATE KEY-----
       * MIIEvgIBADANBgk...
       */
      serviceKey: string;
      /**
       * @description Authorization tenant value for Outlook OAuth2 applications 
       * @example common
       */
      authority: string;
      /**
       * @description Redirect URL for 3-legged OAuth2 applications 
       * @example https://myservice.com/oauth
       */
      redirectUrl?: string;
    };
    CreateAppResponse: {
      /**
       * @description OAuth2 application ID 
       * @example AAABhaBPHscAAAAH
       */
      id: string;
      /**
       * @description Was the app created 
       * @default true
       */
      created?: boolean;
    };
    /** @description List of updated setting keys */
    updated: (string)[];
    Model12: {
      updated?: components["schemas"]["updated"];
    };
    Scopes: ("api" | "smtp" | "imap-proxy")[];
    /**
     * @description HTTP referrer allowlist for API requests 
     * @example [
     *   "*web.domain.org/*",
     *   "*.domain.org/*",
     *   "https://domain.org/*"
     * ]
     */
    Model13: (string)[];
    /**
     * @description IP address allowlist 
     * @example [
     *   "1.2.3.4",
     *   "5.6.7.8",
     *   "127.0.0.0/8"
     * ]
     */
    Model14: (string)[];
    /**
     * @description Access restrictions 
     * @enum {object}
     */
    Model15: false;
    CreateToken: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Token description 
       * @example Token description
       */
      description: string;
      scopes: components["schemas"]["Scopes"];
      /**
       * @description Related metadata in JSON format 
       * @example {"example": "value"}
       */
      metadata?: string;
      restrictions?: components["schemas"]["Model15"];
      /**
       * @description IP address of the requestor 
       * @example 127.0.0.1
       */
      ip?: string;
    };
    CreateTokenResponse: {
      /**
       * @description Access token 
       * @example 123456
       */
      token: string;
    };
    VerifyAccount: {
      /**
       * @description Include mailbox listing in response 
       * @default false 
       * @example false
       */
      mailboxes?: boolean;
      imap?: components["schemas"]["IMAP"];
      smtp?: components["schemas"]["SMTP"];
      /**
       * @description Proxy URL 
       * @example socks://proxy.example.com:1080
       */
      proxy?: string;
    };
    imap: {
      /**
       * @description Was IMAP account verified 
       * @example true
       */
      success?: boolean;
      /**
       * @description Error messages for IMAP verification. Only present if success=false 
       * @example Something went wrong
       */
      error?: string;
      /**
       * @description Error code. Only present if success=false 
       * @example ERR_SSL_WRONG_VERSION_NUMBER
       */
      code?: string;
    };
    smtp: {
      /**
       * @description Was SMTP account verified 
       * @example true
       */
      success?: boolean;
      /**
       * @description Error messages for SMTP verification. Only present if success=false 
       * @example Something went wrong
       */
      error?: string;
      /**
       * @description Error code. Only present if success=false 
       * @example ERR_SSL_WRONG_VERSION_NUMBER
       */
      code?: string;
    };
    Model16: {
      /**
       * @description Full path to mailbox 
       * @example Kalender/S&APw-nnip&AOQ-evad
       */
      path: string;
      /** @example / */
      delimiter?: string;
      /**
       * @description Full path to parent mailbox 
       * @example Kalender
       */
      parentPath: string;
      /**
       * @description Maibox name 
       * @example Sünnipäevad
       */
      name: string;
      /**
       * @description Was the mailbox found from the output of LIST command 
       * @example true
       */
      listed?: boolean;
      /**
       * @description Was the mailbox found from the output of LSUB command 
       * @example true
       */
      subscribed?: boolean;
      /**
       * @description Special use flag of the mailbox if set 
       * @example \Sent 
       * @enum {string}
       */
      specialUse?: "\All" | "\Archive" | "\Drafts" | "\Flagged" | "\Junk" | "\Sent" | "\Trash" | "\Inbox";
    };
    Model17: (components["schemas"]["Model16"])[];
    VerifyAccountResponse: {
      imap?: components["schemas"]["imap"];
      smtp?: components["schemas"]["smtp"];
      mailboxes?: components["schemas"]["Model17"];
    };
    RequestAuthForm: {
      /**
       * @description Account ID. If the provided value is `null` then an unique ID will be autogenerated. Using an existing account ID will update settings for that existing account. 
       * @default null 
       * @example example
       */
      account?: string;
      /**
       * @description Display name for the account 
       * @example My Email Account
       */
      name?: string;
      /**
       * @description Default email address of the account 
       * @example user@example.com
       */
      email?: string;
      /**
       * Format: date-time 
       * @description Sync messages to document store starting from provided date. If not set, all emails are synced. 
       * @example 2021-07-08T07:06:34.336Z
       */
      syncFrom?: string;
      /**
       * Format: date-time 
       * @description Send webhooks for messages starting from provided date. The default is the account creation date. 
       * @example 2021-07-08T07:06:34.336Z
       */
      notifyFrom?: string;
      /**
       * @description The user will be redirected to this URL after submitting the authentication form 
       * @example https://myapp/account/settings.php
       */
      redirectUrl: string;
      /**
       * @description Display the form for the specified account type (either "imap" or an OAuth2 app ID) instead of allowing the user to choose 
       * @default false 
       * @example imap
       */
      type?: string;
    };
    RequestAuthFormResponse: {
      /**
       * @description Generated URL to the hosted authentication form 
       * @example https://ee.example.com/accounts/new?data=eyJhY2NvdW50IjoiZXhh...L0W_BkFH5HW6Krwmr7c&type=imap
       */
      url: string;
    };
    BlocklistListAddPayload: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Email address to add to the list 
       * @example user@example.com
       */
      recipient: string;
      /**
       * @description Identifier for the blocking reason 
       * @default block
       */
      reason?: string;
    };
    BlocklistListAddResponse: {
      /**
       * @description Was the request successfuk 
       * @example true
       */
      success?: boolean;
      /**
       * @description Was the address added to the list 
       * @example true
       */
      added?: boolean;
    };
    CreateTemplateContent: {
      /**
       * @description Message subject 
       * @example What a wonderful message
       */
      subject?: string;
      /**
       * @description Message Text 
       * @example Hello from myself!
       */
      text?: string;
      /**
       * @description Message HTML 
       * @example <p>Hello from myself!</p>
       */
      html?: string;
      /**
       * @description Preview text appears in the inbox after the subject line 
       * @example Welcome to our newsletter!
       */
      previewText?: string;
    };
    CreateTemplate: {
      /**
       * @description Account ID. Use `null` for public templates. 
       * @example example
       */
      account: string;
      /**
       * @description Name of the template 
       * @example Transaction receipt
       */
      name: string;
      /**
       * @description Optional description of the template 
       * @example Something about the template
       */
      description?: string;
      /**
       * @description Markup language for HTML ("html", "markdown" or "mjml") 
       * @default html 
       * @enum {string}
       */
      format?: "html" | "mjml" | "markdown";
      content: components["schemas"]["CreateTemplateContent"];
    };
    CreateTemplateResponse: {
      /** @description Was the template created or not */
      created?: boolean;
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Template ID 
       * @example example
       */
      id: string;
    };
    /** @description Headers to match against */
    Headers: Record<string, never>;
    /** @description Search query to filter messages */
    SearchQuery: {
      /** @description Sequence number range. Not allowed with `documentStore`. */
      seq?: string;
      /** @description Check if message is answered or not */
      answered?: boolean;
      /** @description Check if message is marked for being deleted or not */
      deleted?: boolean;
      /** @description Check if message is a draft */
      draft?: boolean;
      /** @description Check if message is marked as unseen or not */
      unseen?: boolean;
      /** @description Check if message is flagged or not */
      flagged?: boolean;
      /** @description Check if message is marked as seen or not */
      seen?: boolean;
      /** @description Match From: header */
      from?: string;
      /** @description Match To: header */
      to?: string;
      /** @description Match Cc: header */
      cc?: string;
      /** @description Match Bcc: header */
      bcc?: string;
      /** @description Match text body */
      body?: string;
      /** @description Match message subject */
      subject?: string;
      /** @description Matches messages larger than value */
      larger?: number;
      /** @description Matches messages smaller than value */
      smaller?: number;
      /** @description UID range */
      uid?: string;
      /** @description Matches messages with modseq higher than value. Not allowed with `documentStore`. */
      modseq?: number;
      /**
       * Format: date 
       * @description Matches messages received before date
       */
      before?: string;
      /**
       * Format: date 
       * @description Matches messages received after date
       */
      since?: string;
      /**
       * Format: date 
       * @description Matches messages sent before date
       */
      sentBefore?: string;
      /**
       * Format: date 
       * @description Matches messages sent after date
       */
      sentSince?: string;
      /** @description Match specific Gmail unique email UD */
      emailId?: string;
      /** @description Match specific Gmail unique thread UD */
      threadId?: string;
      header?: components["schemas"]["Headers"];
      /**
       * @description Raw Gmail search string. Will return an error if used for other account types. 
       * @example has:attachment in:unread
       */
      gmailRaw?: string;
    };
    /** @description Document Store query. Only allowed with `documentStore`. */
    DocumentQuery: Record<string, never>;
    Model18: {
      search: components["schemas"]["SearchQuery"];
      documentQuery?: components["schemas"]["DocumentQuery"];
    };
    /**
     * @description Mailbox path as an array or a string. If account is namespaced then namespace prefix is added by default. 
     * @example [
     *   "Parent folder",
     *   "Subfolder"
     * ]
     */
    MailboxPath: (string)[];
    CreateMailbox: {
      path?: components["schemas"]["MailboxPath"];
    };
    CreateMailboxResponse: {
      /**
       * @description Full path to mailbox 
       * @example Kalender/S&APw-nnip&AOQ-evad
       */
      path: string;
      /**
       * @description Mailbox ID (if server has support) 
       * @example 1439876283476
       */
      mailboxId?: string;
      /**
       * @description Was the mailbox created 
       * @example true
       */
      created?: boolean;
    };
    /**
     * @description Message flags 
     * @example [
     *   "\\Seen",
     *   "\\Draft"
     * ]
     */
    Flags: (string)[];
    /** @description Message reference for a reply or a forward. This is EmailEngine specific ID, not Message-ID header value. */
    MessageReference: {
      /**
       * @description Referenced message ID 
       * @example AAAAAQAACnA
       */
      message: string;
      /**
       * @default reply 
       * @example reply 
       * @enum {string}
       */
      action?: "forward" | "reply";
      /**
       * @description If true, then blockquotes the email that is being replied to 
       * @default false
       */
      inline?: boolean;
      /**
       * @description If true, then includes attachments in forwarded message 
       * @default false
       */
      forwardAttachments?: boolean;
      /**
       * @description If true, then processes the email even if the original message is not available anymore 
       * @default false
       */
      ignoreMissing?: boolean;
      /**
       * @description If enabled then fetch the data from the Document Store instead of IMAP 
       * @default false
       */
      documentStore?: boolean;
    };
    UploadAttachment: {
      /** @example transparent.gif */
      filename?: string;
      /**
       * @description Base64 formatted attachment file 
       * @example R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=
       */
      content: string;
      /** @example image/gif */
      contentType?: string;
      /** @enum {string} */
      contentDisposition?: "inline" | "attachment";
      /**
       * @description Content-ID value for embedded images 
       * @example unique-image-id@localhost
       */
      cid?: string;
      /**
       * @default base64 
       * @enum {string}
       */
      encoding?: "base64";
    };
    /** @description List of attachments */
    UploadAttachmentList: (components["schemas"]["UploadAttachment"])[];
    /** @description Custom Headers */
    CustomHeaders: Record<string, never>;
    MessageUpload: {
      /**
       * @description Target mailbox folder path 
       * @example INBOX
       */
      path: string;
      flags?: components["schemas"]["Flags"];
      /**
       * Format: date-time 
       * @description Sets the internal date for this message 
       * @example 2021-07-08T07:06:34.336Z
       */
      internalDate?: string;
      reference?: components["schemas"]["MessageReference"];
      from: components["schemas"]["Address"];
      to?: components["schemas"]["AddressList"];
      cc?: components["schemas"]["Model5"];
      bcc?: components["schemas"]["Model5"];
      /**
       * @description Message subject 
       * @example What a wonderful message
       */
      subject?: string;
      /**
       * @description Message Text 
       * @example Hello from myself!
       */
      text?: string;
      /**
       * @description Message HTML 
       * @example <p>Hello from myself!</p>
       */
      html?: string;
      attachments?: components["schemas"]["UploadAttachmentList"];
      /**
       * @description Message ID 
       * @example <test123@example.com>
       */
      messageId?: string;
      headers?: components["schemas"]["CustomHeaders"];
      /**
       * @description Optional locale 
       * @example fr
       */
      locale?: string;
      /**
       * @description Optional timezone 
       * @example Europe/Tallinn
       */
      tz?: string;
    };
    /** @description Reference info if referencing was requested */
    ResponseReference: {
      /**
       * @description Referenced message ID 
       * @example AAAAAQAACnA
       */
      message: string;
      /**
       * @description Was the referenced message processed 
       * @example true
       */
      success?: boolean;
      /**
       * @description An error message if referenced message processing failed 
       * @example Referenced message was not found
       */
      error?: string;
    };
    MessageUploadResponse: {
      /**
       * @description Message ID. NB! This and other fields might not be present if server did not provide enough information 
       * @example AAAAAgAACrI
       */
      id?: string;
      /**
       * @description Folder this message was uploaded to 
       * @example INBOX
       */
      path?: string;
      /**
       * @description UID of uploaded message 
       * @example 12345
       */
      uid?: number;
      /**
       * @description Sequence number of uploaded message 
       * @example 12345
       */
      seq?: number;
      reference?: components["schemas"]["ResponseReference"];
    };
    Model19: (string)[];
    /** @description Optional SMTP envelope. If not set then derived from message headers. */
    SMTPEnvelope: {
      /** @example sender@example.com */
      from?: string;
      to?: components["schemas"]["Model19"];
    };
    /**
     * @description The From address 
     * @example {
     *   "name": "From Me",
     *   "address": "sender@example.com"
     * }
     */
    From: {
      /** @example Some Name */
      name?: string;
      /** @example user@example.com */
      address: string;
    };
    /**
     * @description List of Reply-To addresses 
     * @example [
     *   {
     *     "name": "From Me",
     *     "address": "sender@example.com"
     *   }
     * ]
     */
    ReplyTo: (components["schemas"]["Model4"])[];
    /**
     * @description List of recipient addresses 
     * @example [
     *   {
     *     "address": "recipient@example.com"
     *   }
     * ]
     */
    ToAddressList: (components["schemas"]["Model4"])[];
    /** @description List of CC addresses */
    CcAddressList: (components["schemas"]["Model4"])[];
    /** @description List of BCC addresses */
    BccAddressList: (components["schemas"]["Model4"])[];
    /** @description An object of variables for the template renderer */
    RenderValues: Record<string, never>;
    /**
     * @description Template rendering options 
     * @enum {object}
     */
    render: false;
    MailMergeListEntry: {
      to: components["schemas"]["Model4"];
      /**
       * @description Message ID 
       * @example <test123@example.com>
       */
      messageId?: string;
      params?: components["schemas"]["RenderValues"];
      /**
       * Format: date-time 
       * @description Send message at specified time. Overrides message level `sendAt` value. 
       * @example 2021-07-08T07:06:34.336Z
       */
      sendAt?: string;
    };
    /** @description Mail merge options. A separate email is generated for each recipient. Using mail merge disables `messageId`, `envelope`, `to`, `cc`, `bcc`, `render` keys for the message root. */
    MailMergeList: (components["schemas"]["MailMergeListEntry"])[];
    SubmitMessage: {
      reference?: components["schemas"]["MessageReference"];
      envelope?: components["schemas"]["SMTPEnvelope"];
      from?: components["schemas"]["From"];
      replyTo?: components["schemas"]["ReplyTo"];
      to?: components["schemas"]["ToAddressList"];
      cc?: components["schemas"]["CcAddressList"];
      bcc?: components["schemas"]["BccAddressList"];
      /**
       * @description Base64 encoded email message in rfc822 format. If you provide other keys as well then these will override the values in the raw message. 
       * @example TUlNRS1WZXJzaW9uOiAxLjANClN1YmplY3Q6IGhlbGxvIHdvcmxkDQoNCkhlbGxvIQ0K
       */
      raw?: string;
      /**
       * @description Message subject 
       * @example What a wonderful message
       */
      subject?: string;
      /**
       * @description Message Text 
       * @example Hello from myself!
       */
      text?: string;
      /**
       * @description Message HTML 
       * @example <p>Hello from myself!</p>
       */
      html?: string;
      /**
       * @description Preview text appears in the inbox after the subject line 
       * @example Welcome to our newsletter!
       */
      previewText?: string;
      /**
       * @description Stored template ID to load the email content from 
       * @example example
       */
      template?: string;
      render?: components["schemas"]["render"];
      mailMerge?: components["schemas"]["MailMergeList"];
      attachments?: components["schemas"]["UploadAttachmentList"];
      /**
       * @description Message ID 
       * @example <test123@example.com>
       */
      messageId?: string;
      headers?: components["schemas"]["CustomHeaders"];
      /**
       * @description Should EmailEngine track clicks and opens for this message 
       * @example false
       */
      trackingEnabled?: boolean;
      /**
       * @description If set then either copies the message to the Sent Mail folder or not. If not set then uses the account's default setting. 
       * @example false
       */
      copy?: boolean;
      /**
       * @description Upload sent message to this folder. By default the account's Sent Mail folder is used. 
       * @example Sent Mail
       */
      sentMailPath?: string;
      /**
       * @description Optional locale 
       * @example fr
       */
      locale?: string;
      /**
       * @description Optional timezone 
       * @example Europe/Tallinn
       */
      tz?: string;
      /**
       * Format: date-time 
       * @description Send message at specified time 
       * @example 2021-07-08T07:06:34.336Z
       */
      sendAt?: string;
      /**
       * @description How many delivery attempts to make until message is considered as failed 
       * @example 10
       */
      deliveryAttempts?: number;
      /**
       * @description Optional SMTP gateway ID for message routing 
       * @example example
       */
      gateway?: string;
      /**
       * @description List ID for Mail Merge. Must use a subdomain name format. Lists are registered ad-hoc, so a new identifier defines a new list. 
       * @example test-list
       */
      listId?: string;
      /**
       * @description If true, then EmailEngine does not send the email and returns an RFC822 formatted email file. Tracking information is not added to the email. 
       * @default false
       */
      dryRun?: boolean;
    };
    /** @description Reference info if referencing was requested */
    Model20: {
      /**
       * @description Referenced message ID 
       * @example AAAAAQAACnA
       */
      message: string;
      /**
       * @description Was the message dat aloaded from the document store 
       * @example true
       */
      documentStore?: boolean;
      /**
       * @description Was the referenced message processed successfully 
       * @example true
       */
      success?: boolean;
      /**
       * @description An error message if referenced message processing failed 
       * @example Referenced message was not found
       */
      error?: string;
    };
    /** @description Info about skipped message. If this value is set, then the message was not sent */
    skipped: {
      /**
       * @description Why this message was skipped 
       * @example unsubscribe
       */
      reason?: string;
      /** @example test-list */
      listId?: string;
    };
    /**
     * @example {
     *   "success": true,
     *   "to": {
     *     "name": "Andris 2",
     *     "address": "andris@ethereal.email"
     *   },
     *   "messageId": "<19b9c433-d428-f6d8-1d00-d666ebcadfc4@ekiri.ee>",
     *   "queueId": "1812477338914c8372a",
     *   "reference": {
     *     "message": "AAAAAQAACnA",
     *     "success": true
     *   },
     *   "sendAt": "2021-07-08T07:06:34.336Z"
     * }
     */
    BulkResponseEntry: {
      /**
       * @description Was the referenced message processed successfully 
       * @example true
       */
      success?: boolean;
      to?: components["schemas"]["Model4"];
      /**
       * @description Message ID 
       * @example <test123@example.com>
       */
      messageId?: string;
      /**
       * @description Queue identifier for scheduled email. Not present for bulk messages. 
       * @example d41f0423195f271f
       */
      queueId?: string;
      reference?: components["schemas"]["Model20"];
      /**
       * Format: date-time 
       * @description Send message at specified time. Overrides message level `sendAt` value. 
       * @example 2021-07-08T07:06:34.336Z
       */
      sendAt?: string;
      skipped?: components["schemas"]["skipped"];
    };
    /** @description Bulk message responses */
    BulkResponseList: (components["schemas"]["BulkResponseEntry"])[];
    SubmitMessageResponse: {
      /** @example Queued for delivery */
      response?: string;
      /**
       * @description Message-ID header value. Not present for bulk messages. 
       * @example <a2184d08-a470-fec6-a493-fa211a3756e9@example.com>
       */
      messageId?: string;
      /**
       * @description Queue identifier for scheduled email. Not present for bulk messages. 
       * @example d41f0423195f271f
       */
      queueId?: string;
      /**
       * Format: date 
       * @description Scheduled send time
       */
      sendAt?: string;
      reference?: components["schemas"]["Model20"];
      /**
       * @description Base64 encoded RFC822 email if a preview was requested 
       * @example Q29udGVudC1UeXBlOiBtdWx0aX...
       */
      preview?: string;
      mailMerge?: components["schemas"]["BulkResponseList"];
    };
    DeliveryStartRequest: {
      /**
       * @description Optional gateway ID 
       * @example false
       */
      gateway?: string;
    };
    DeliveryStartResponse: {
      /**
       * @description Was the test started 
       * @example true
       */
      success?: boolean;
      /**
       * @description Test ID 
       * @example 6420a6ad-7f82-4e4f-8112-82a9dad1f34d
       */
      deliveryTest?: string;
    };
    EmptyLicenseResponse: {
      /** @example false */
      active?: boolean;
      /** @example false */
      details?: boolean;
      /** @example SSPL-1.0-or-later */
      type?: string;
    };
    DeleteRequestResponse: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Was the account deleted 
       * @default true
       */
      deleted?: boolean;
    };
    DeleteBlocklistResponse: {
      /**
       * @description Was the address removed from the list 
       * @default true
       */
      deleted?: boolean;
    };
    Model21: {
      /**
       * @description Gateway ID 
       * @example example
       */
      gateway: string;
      /**
       * @description Was the gateway deleted 
       * @default true
       */
      deleted?: boolean;
    };
    DeleteAppRequestResponse: {
      /**
       * @description OAuth2 application ID 
       * @example AAABhaBPHscAAAAH
       */
      id: string;
      /**
       * @description Was the gateway deleted 
       * @default true
       */
      deleted?: boolean;
      /**
       * @description The number of accounts registered with this application. Not available for legacy apps. 
       * @example 12
       */
      accounts?: number;
    };
    DeleteOutboxEntryResponse: {
      /**
       * @description Was the message deleted 
       * @default true
       */
      deleted?: boolean;
    };
    DeleteTokenRequestResponse: {
      /**
       * @description Was the account deleted 
       * @default true
       */
      deleted?: boolean;
    };
    DeleteMailboxResponse: {
      /**
       * @description Full path to mailbox 
       * @example Kalender/S&APw-nnip&AOQ-evad
       */
      path: string;
      /**
       * @description Was the mailbox deleted 
       * @example true
       */
      deleted?: boolean;
    };
    DeleteTemplateRequestResponse: {
      /**
       * @description Was the account flushed 
       * @default true
       */
      deleted?: boolean;
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
    };
    Model22: {
      /**
       * @description Was the template deleted 
       * @default true
       */
      deleted?: boolean;
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Template ID 
       * @example AAABgS-UcAYAAAABAA
       */
      id: string;
    };
    /** @description Present if message was moved to Trash */
    moved: {
      /**
       * @description Trash folder path 
       * @example Trash
       */
      destination: string;
      /**
       * @description Message ID in Trash 
       * @example AAAAAwAAAWg
       */
      message: string;
    };
    MessageDeleteResponse: {
      /**
       * @description Was the delete action executed 
       * @example false
       */
      deleted?: boolean;
      moved?: components["schemas"]["moved"];
    };
    /** @description Optional TLS configuration */
    Model23: {
      /**
       * @description How to treat invalid certificates 
       * @example true
       */
      rejectUnauthorized?: boolean;
      /**
       * @description Minimal TLS version 
       * @example TLSv1.2
       */
      minVersion?: string;
    };
    /**
     * @description IMAP configuration 
     * @enum {object}
     */
    IMAPUpdate: false;
    /**
     * @description SMTP configuration 
     * @enum {object}
     */
    SMTPUpdate: false;
    /**
     * @description OAuth2 configuration 
     * @enum {object}
     */
    OAuth2Update: false;
    UpdateAccount: {
      /**
       * @description Display name for the account 
       * @example My Email Account
       */
      name?: string;
      /**
       * @description Default email address of the account 
       * @example user@example.com
       */
      email?: string;
      /**
       * @description Check changes only on selected path 
       * @default * 
       * @example INBOX
       */
      path?: string;
      /**
       * @description Account-specific webhook URL 
       * @example https://myservice.com/imap/webhooks
       */
      webhooks?: string;
      /**
       * @description Copy submitted messages to Sent folder. Set to `null` to unset and use provider specific default. 
       * @example false
       */
      copy?: boolean;
      /**
       * @description Store recent logs 
       * @example false
       */
      logs?: boolean;
      /**
       * Format: date-time 
       * @description Send webhooks for messages starting from provided date. The default is the account creation date. 
       * @example 2021-07-08T07:06:34.336Z
       */
      notifyFrom?: string;
      /**
       * Format: date-time 
       * @description Sync messages to document store starting from provided date. If not set, all emails are synced. 
       * @example 2021-07-08T07:06:34.336Z
       */
      syncFrom?: string;
      /**
       * @description Proxy URL 
       * @example socks://proxy.example.com:1080
       */
      proxy?: string;
      imap?: components["schemas"]["IMAPUpdate"];
      smtp?: components["schemas"]["SMTPUpdate"];
      oauth2?: components["schemas"]["OAuth2Update"];
      /**
       * @description Optional locale 
       * @example fr
       */
      locale?: string;
      /**
       * @description Optional timezone 
       * @example Europe/Tallinn
       */
      tz?: string;
    };
    Model24: {
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
    };
    /** @description OAuth2 Extra Scopes */
    Model25: (string)[];
    UpdateGateway: {
      /**
       * @description Application name 
       * @example My Gmail App
       */
      name: string;
      /**
       * @description Application description 
       * @example My cool app
       */
      description?: string;
      /**
       * @description Enable this app 
       * @example true
       */
      enabled?: boolean;
      /**
       * @description Client or Application ID for 3-legged OAuth2 applications 
       * @example 52422112755-3uov8bjwlrullq122rdm6l8ui25ho7qf.apps.googleusercontent.com
       */
      clientId?: string;
      /**
       * @description Client secret for 3-legged OAuth2 applications 
       * @example boT7Q~dUljnfFdVuqpC11g8nGMjO8kpRAv-ZB
       */
      clientSecret?: string;
      extraScopes?: components["schemas"]["Model25"];
      /**
       * @description Service client ID for 2-legged OAuth2 applications 
       * @example 7103296518315821565203
       */
      serviceClient?: string;
      /**
       * @description PEM formatted service secret for 2-legged OAuth2 applications 
       * @example -----BEGIN PRIVATE KEY-----
       * MIIEvgIBADANBgk...
       */
      serviceKey?: string;
      /**
       * @description Authorization tenant value for Outlook OAuth2 applications 
       * @example common
       */
      authority?: string;
      /**
       * @description Redirect URL for 3-legged OAuth2 applications 
       * @example https://myservice.com/oauth
       */
      redirectUrl?: string;
    };
    UpdateGatewayResponse: {
      /**
       * @description Gateway ID 
       * @example example
       */
      gateway: string;
    };
    /**
     * @description Add new flags 
     * @example [
     *   "\\Seen"
     * ]
     */
    AddFlags: (string)[];
    /**
     * @description Delete specific flags 
     * @example [
     *   "\\Flagged"
     * ]
     */
    DeleteFlags: (string)[];
    /**
     * @description Override all flags 
     * @example [
     *   "\\Seen",
     *   "\\Flagged"
     * ]
     */
    SetFlags: (string)[];
    /** @description Flag updates */
    FlagUpdate: {
      add?: components["schemas"]["AddFlags"];
      delete?: components["schemas"]["DeleteFlags"];
      set?: components["schemas"]["SetFlags"];
    };
    /**
     * @description Add new labels 
     * @example [
     *   "Some label"
     * ]
     */
    AddLabels: (string)[];
    /**
     * @description Delete specific labels 
     * @example [
     *   "Some label"
     * ]
     */
    DeleteLabels: (string)[];
    /**
     * @description Override all labels 
     * @example [
     *   "First label",
     *   "Second label"
     * ]
     */
    SetLabels: (string)[];
    /** @description Label updates */
    LabelUpdate: {
      add?: components["schemas"]["AddLabels"];
      delete?: components["schemas"]["DeleteLabels"];
      set?: components["schemas"]["SetLabels"];
    };
    MessageUpdate: {
      flags?: components["schemas"]["FlagUpdate"];
      labels?: components["schemas"]["LabelUpdate"];
    };
    MessagesUpdateRequest: {
      search?: components["schemas"]["SearchQuery"];
      update?: components["schemas"]["MessageUpdate"];
    };
    FlagResponse: {
      /** @example true */
      add?: boolean;
      /** @example false */
      delete?: boolean;
      /** @example false */
      set?: boolean;
    };
    MessageUpdateResponse: {
      flags?: components["schemas"]["FlagResponse"];
      labels?: components["schemas"]["FlagResponse"];
    };
    /**
     * @description New mailbox path as an array or a string. If account is namespaced then namespace prefix is added by default. 
     * @example [
     *   "Parent folder",
     *   "Subfolder"
     * ]
     */
    TargetMailboxPath: (string)[];
    RenameMailbox: {
      /**
       * @description Mailbox folder path to rename 
       * @example Previous Mail
       */
      path: string;
      newPath?: components["schemas"]["TargetMailboxPath"];
    };
    RenameMailboxResponse: {
      /**
       * @description Mailbox folder path to rename 
       * @example Previous Mail
       */
      path: string;
      /**
       * @description Full path to mailbox 
       * @example Kalender/S&APw-nnip&AOQ-evad
       */
      newPath: string;
      /**
       * @description Was the mailbox renamed 
       * @example true
       */
      renamed?: boolean;
    };
    RequestReconnect: {
      /**
       * @description Only reconnect if true 
       * @default false
       */
      reconnect?: boolean;
    };
    RequestReconnectResponse: {
      /**
       * @description Reconnection status 
       * @default false
       */
      reconnect?: boolean;
    };
    RequestSync: {
      /**
       * @description Only sync if true 
       * @default false
       */
      sync?: boolean;
    };
    RequestSyncResponse: {
      /**
       * @description Sync status 
       * @default false
       */
      sync?: boolean;
    };
    Model26: {
      /**
       * @description Account Name 
       * @example John Smith
       */
      name?: string;
      user?: string;
      pass?: string;
      /**
       * @description Hostname to connect to 
       * @example smtp.gmail.com
       */
      host?: string;
      /**
       * @description Service port number 
       * @example 465
       */
      port?: number;
      /**
       * @description Should connection use TLS. Usually true for port 465 
       * @example true
       */
      secure?: boolean;
    };
    UpdateTemplate: {
      /**
       * @description Name of the template 
       * @example Transaction receipt
       */
      name?: string;
      /**
       * @description Optional description of the template 
       * @example Something about the template
       */
      description?: string;
      /**
       * @description Markup language for HTML ("html", "markdown" or "mjml") 
       * @default html 
       * @enum {string}
       */
      format?: "html" | "mjml" | "markdown";
      content?: components["schemas"]["CreateTemplateContent"];
    };
    UpdateTemplateResponse: {
      /** @description Was the template updated or not */
      updated?: boolean;
      /**
       * @description Account ID 
       * @example example
       */
      account: string;
      /**
       * @description Template ID 
       * @example example
       */
      id: string;
    };
    MessagesMoveRequest: {
      search?: components["schemas"]["SearchQuery"];
      /**
       * @description Target mailbox folder path 
       * @example INBOX
       */
      path: string;
    };
    Model27: (string)[];
    /**
     * @description An optional map of source and target ID values, if the server provided this info 
     * @example [
     *   [
     *     "AAAAAQAACnA",
     *     "AAAAAwAAAD4"
     *   ]
     * ]
     */
    idMap: (components["schemas"]["Model27"])[];
    MessagesMoveResponse: {
      /**
       * @description Target mailbox folder path 
       * @example INBOX
       */
      path: string;
      idMap?: components["schemas"]["idMap"];
    };
    MessagesDeleteRequest: {
      search?: components["schemas"]["SearchQuery"];
    };
    /** @description Present if messages were moved to Trash */
    Model28: {
      /**
       * @description Trash folder path 
       * @example Trash
       */
      destination: string;
      idMap?: components["schemas"]["idMap"];
    };
    MessagesDeleteResponse: {
      /**
       * @description Was the delete action executed 
       * @example false
       */
      deleted?: boolean;
      moved?: components["schemas"]["Model28"];
    };
    MessageMove: {
      /**
       * @description Target mailbox folder path 
       * @example INBOX
       */
      path: string;
    };
    MessageMoveResponse: {
      /**
       * @description Target mailbox folder path 
       * @example INBOX
       */
      path: string;
      /**
       * @description Message ID 
       * @example AAAAAQAACnA
       */
      id: string;
      /**
       * @description UID of moved message 
       * @example 12345
       */
      uid?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  getV1Accounts: {
    /**
     * List accounts 
     * @description Lists registered accounts
     */
    parameters: {
        /** @description Page number (zero indexed, so use 0 for first page) */
        /** @description How many entries per page */
        /** @description Filter accounts by state */
        /** @description Filter accounts by string match */
      query: {
        page?: number;
        pageSize?: number;
        state?: "init" | "syncing" | "connecting" | "connected" | "authenticationError" | "connectError" | "unset" | "disconnected";
        query?: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["AccountsFilterResponse"];
        };
      };
    };
  };
  getV1Autoconfig: {
    /**
     * Discover Email settings 
     * @description Try to discover IMAP and SMTP settings for an email account
     */
    parameters: {
        /** @description Email address to discover email settings for */
      query: {
        email: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["DiscoveredEmailSettings"];
        };
      };
    };
  };
  getV1Blocklists: {
    /**
     * List blocklists 
     * @description List blocklists with blocked addresses
     */
    parameters: {
        /** @description Page number (zero indexed, so use 0 for first page) */
        /** @description How many entries per page */
      query: {
        page?: number;
        pageSize?: number;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["BlocklistsResponse"];
        };
      };
    };
  };
  getV1Changes: {
    /**
     * Stream state changes 
     * @description Stream account state changes as an EventSource
     */
    responses: {
      /** @description Successful */
      default: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getV1Gateways: {
    /**
     * List gateways 
     * @description Lists registered gateways
     */
    parameters: {
        /** @description Page number (zero indexed, so use 0 for first page) */
        /** @description How many entries per page */
      query: {
        page?: number;
        pageSize?: number;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["GatewaysFilterResponse"];
        };
      };
    };
  };
  getV1License: {
    /**
     * Request license info 
     * @description Get active license information
     */
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["LicenseResponse"];
        };
      };
    };
  };
  postV1License: {
    /**
     * Register a license 
     * @description Set up a license for EmailEngine to unlock all features
     */
    requestBody?: {
      content: {
        "*/*": components["schemas"]["RegisterLicense"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["LicenseResponse"];
        };
      };
    };
  };
  deleteV1License: {
    /**
     * Remove license 
     * @description Remove registered active license
     */
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["EmptyLicenseResponse"];
        };
      };
    };
  };
  getV1Oauth2: {
    /**
     * List OAuth2 applications 
     * @description Lists registered OAuth2 applications
     */
    parameters: {
        /** @description Page number (zero indexed, so use 0 for first page) */
        /** @description How many entries per page */
      query: {
        page?: number;
        pageSize?: number;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["OAuth2FilterResponse"];
        };
      };
    };
  };
  postV1Oauth2: {
    /**
     * Register OAuth2 application 
     * @description Registers a new OAuth2 application for a specific provider
     */
    requestBody?: {
      content: {
        "*/*": components["schemas"]["CreateOAuth2App"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["CreateAppResponse"];
        };
      };
    };
  };
  getV1Outbox: {
    /**
     * List queued messages 
     * @description Lists messages in the Outbox
     */
    parameters: {
        /** @description Page number (zero indexed, so use 0 for first page) */
        /** @description How many entries per page */
      query: {
        page?: number;
        pageSize?: number;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["OutboxListResponse"];
        };
      };
    };
  };
  getV1Settings: {
    /**
     * List specific settings 
     * @description List setting values for specific keys
     */
    parameters: {
      query: {
        eventTypes?: boolean;
        webhooksEnabled?: boolean;
        webhooks?: boolean;
        webhookEvents?: boolean;
        webhooksCustomHeaders?: boolean;
        notifyHeaders?: boolean;
        serviceUrl?: boolean;
        trackSentMessages?: boolean;
        resolveGmailCategories?: boolean;
        inboxNewOnly?: boolean;
        serviceSecret?: boolean;
        authServer?: boolean;
        proxyEnabled?: boolean;
        proxyUrl?: boolean;
        notifyText?: boolean;
        notifyTextSize?: boolean;
        gmailEnabled?: boolean;
        gmailClientId?: boolean;
        gmailClientSecret?: boolean;
        gmailRedirectUrl?: boolean;
        gmailExtraScopes?: boolean;
        outlookEnabled?: boolean;
        outlookClientId?: boolean;
        outlookClientSecret?: boolean;
        outlookRedirectUrl?: boolean;
        outlookAuthority?: boolean;
        outlookExtraScopes?: boolean;
        mailRuEnabled?: boolean;
        mailRuClientId?: boolean;
        mailRuClientSecret?: boolean;
        mailRuRedirectUrl?: boolean;
        mailRuExtraScopes?: boolean;
        serviceClient?: boolean;
        serviceKey?: boolean;
        serviceExtraScopes?: boolean;
        logs?: boolean;
        imapStrategy?: boolean;
        smtpStrategy?: boolean;
        localAddresses?: boolean;
        smtpServerEnabled?: boolean;
        smtpServerPort?: boolean;
        smtpServerHost?: boolean;
        smtpServerProxy?: boolean;
        smtpServerAuthEnabled?: boolean;
        smtpServerPassword?: boolean;
        smtpServerTLSEnabled?: boolean;
        imapProxyServerEnabled?: boolean;
        imapProxyServerPort?: boolean;
        imapProxyServerHost?: boolean;
        imapProxyServerProxy?: boolean;
        imapProxyServerPassword?: boolean;
        imapProxyServerTLSEnabled?: boolean;
        queueKeep?: boolean;
        templateHeader?: boolean;
        enableApiProxy?: boolean;
        documentStoreEnabled?: boolean;
        documentStoreUrl?: boolean;
        documentStoreIndex?: boolean;
        documentStoreAuthEnabled?: boolean;
        documentStoreUsername?: boolean;
        documentStorePassword?: boolean;
        documentStorePreProcessingEnabled?: boolean;
        locale?: boolean;
        timezone?: boolean;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["SettingsQueryResponse"];
        };
      };
    };
  };
  postV1Settings: {
    /**
     * Set setting values 
     * @description Set setting values for specific keys
     */
    requestBody?: {
      content: {
        "*/*": components["schemas"]["SettingsQueryResponse"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["Model12"];
        };
      };
    };
  };
  getV1Stats: {
    /** Return server stats */
    parameters: {
        /** @description Duration for counters */
      query: {
        seconds?: number;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["SettingsResponse"];
        };
      };
    };
  };
  getV1Templates: {
    /**
     * List account templates 
     * @description Lists stored templates for the account
     */
    parameters: {
        /** @description Account ID to list the templates for */
        /** @description Page number (zero indexed, so use 0 for first page) */
        /** @description How many entries per page */
      query: {
        account?: string;
        page?: number;
        pageSize?: number;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["AccountTemplatesResponse"];
        };
      };
    };
  };
  getV1Tokens: {
    /**
     * List root tokens 
     * @description Lists access tokens registered for root access
     */
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["Model3"];
        };
      };
    };
  };
  getV1AccountAccount: {
    /**
     * Get account info 
     * @description Returns stored information about the account. Passwords are not included.
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["AccountResponse"];
        };
      };
    };
  };
  putV1AccountAccount: {
    /**
     * Update account info 
     * @description Updates account information
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["UpdateAccount"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["Model24"];
        };
      };
    };
  };
  deleteV1AccountAccount: {
    /**
     * Remove synced account 
     * @description Stop syncing IMAP account and delete cached values
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteRequestResponse"];
        };
      };
    };
  };
  getV1BlocklistListid: {
    /**
     * List blocklist entries 
     * @description List blocked addresses for a list
     */
    parameters: {
        /** @description Page number (zero indexed, so use 0 for first page) */
        /** @description How many entries per page */
      query: {
        page?: number;
        pageSize?: number;
      };
        /** @description List ID. Must use a subdomain name format. Lists are registered ad-hoc, so a new identifier defines a new list. */
      path: {
        listId: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["BlocklistListResponse"];
        };
      };
    };
  };
  postV1BlocklistListid: {
    /**
     * Add to blocklist 
     * @description Add an email address to a blocklist
     */
    parameters: {
        /** @description List ID. Must use a subdomain name format. Lists are registered ad-hoc, so a new identifier defines a new list. */
      path: {
        listId: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["BlocklistListAddPayload"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["BlocklistListAddResponse"];
        };
      };
    };
  };
  deleteV1BlocklistListid: {
    /**
     * Remove from blocklist 
     * @description Delete a blocked email address from a list
     */
    parameters: {
        /** @description Email address to remove from the list */
      query: {
        recipient: string;
      };
        /** @description List ID. Must use a subdomain name format. Lists are registered ad-hoc, so a new identifier defines a new list. */
      path: {
        listId: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteBlocklistResponse"];
        };
      };
    };
  };
  getV1GatewayGateway: {
    /**
     * Get gateway info 
     * @description Returns stored information about the gateway. Passwords are not included.
     */
    parameters: {
        /** @description Gateway ID */
      path: {
        gateway: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["GatewayResponse"];
        };
      };
    };
  };
  deleteV1GatewayGateway: {
    /**
     * Remove SMTP gateway 
     * @description Delete SMTP gateway data
     */
    parameters: {
        /** @description Gateway ID */
      path: {
        gateway: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["Model21"];
        };
      };
    };
  };
  getV1LogsAccount: {
    /**
     * Return IMAP logs for an account 
     * @description Output is a downloadable text file
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    responses: {
      /** @description Successful */
      default: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getV1Oauth2App: {
    /**
     * Get application info 
     * @description Returns stored information about an OAuth2 application. Secrets are not included.
     */
    parameters: {
        /** @description OAuth2 application ID */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["ApplicationResponse"];
        };
      };
    };
  };
  putV1Oauth2App: {
    /**
     * Update OAuth2 application 
     * @description Updates OAuth2 application information
     */
    parameters: {
        /** @description OAuth2 application ID */
      path: {
        app: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["UpdateGateway"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateGatewayResponse"];
        };
      };
    };
  };
  deleteV1Oauth2App: {
    /**
     * Remove OAuth2 application 
     * @description Delete OAuth2 application data
     */
    parameters: {
        /** @description OAuth2 application ID */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteAppRequestResponse"];
        };
      };
    };
  };
  getV1AccountAccountMessages: {
    /**
     * List messages in a folder 
     * @description Lists messages in a mailbox folder
     */
    parameters: {
        /** @description Mailbox folder path */
        /** @description Page number (zero indexed, so use 0 for first page) */
        /** @description How many entries per page */
        /** @description If enabled then fetch the data from the Document Store instead of IMAP */
      query: {
        path: string;
        page?: number;
        pageSize?: number;
        documentStore?: boolean;
      };
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["MessageList"];
        };
      };
    };
  };
  putV1AccountAccountMessages: {
    /**
     * Update messages 
     * @description Update message information for matching emails
     */
    parameters: {
        /** @description Mailbox folder path */
      query: {
        path: string;
      };
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["MessagesUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["MessageUpdateResponse"];
        };
      };
    };
  };
  getV1AccountAccountMailboxes: {
    /**
     * List mailboxes 
     * @description Lists all available mailboxes
     */
    parameters: {
        /** @description If true, then includes message counters in the response */
      query: {
        counters?: boolean;
      };
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["MailboxesFilterResponse"];
        };
      };
    };
  };
  getV1AccountAccountOauthtoken: {
    /**
     * Get OAuth2 access token 
     * @description Get the active OAuth2 access token for an account. NB! This endpoint is disabled by default and needs activation on the Service configuration page.
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["AccountTokenResponse"];
        };
      };
    };
  };
  getV1DeliverytestCheckDeliverytest: {
    /**
     * Check test status 
     * @description Check delivery test status
     */
    parameters: {
        /** @description Test ID */
      path: {
        deliveryTest: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["DeliveryCheckResponse"];
        };
      };
    };
  };
  getV1TemplatesTemplateTemplate: {
    /**
     * Get template information 
     * @description Retrieve template content and information
     */
    parameters: {
        /** @description Template ID */
      path: {
        template: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["AccountTemplateResponse"];
        };
      };
    };
  };
  putV1TemplatesTemplateTemplate: {
    /**
     * Update a template 
     * @description Update a stored template.
     */
    parameters: {
        /** @description Template ID */
      path: {
        template: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["UpdateTemplate"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateTemplateResponse"];
        };
      };
    };
  };
  deleteV1TemplatesTemplateTemplate: {
    /**
     * Remove a template 
     * @description Delete a stored template
     */
    parameters: {
        /** @description Template ID */
      path: {
        template: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["Model22"];
        };
      };
    };
  };
  getV1TokensAccountAccount: {
    /**
     * List account tokens 
     * @description Lists access tokens registered for an account
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["Model9"];
        };
      };
    };
  };
  getV1AccountAccountMessageMessage: {
    /**
     * Get message information 
     * @description Returns details of a specific message. By default text content is not included, use textType value to force retrieving text
     */
    parameters: {
        /** @description Max length of text content. This setting is ignored if `documentStore` is `true`. */
        /** @description Which text content to return, use * for all. By default text content is not returned. */
        /** @description If true, then fetches attached images and embeds these in the HTML as data URIs */
        /** @description If enabled then fetch the data from the Document Store instead of IMAP */
      query: {
        maxBytes?: number;
        textType?: "html" | "plain" | "*";
        embedAttachedImages?: boolean;
        documentStore?: boolean;
      };
        /** @description Account ID */
        /** @description Message ID */
      path: {
        account: string;
        message: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["Model11"];
        };
      };
    };
  };
  putV1AccountAccountMessageMessage: {
    /**
     * Update message 
     * @description Update message information. Mainly this means changing message flag values
     */
    parameters: {
        /** @description Account ID */
        /** @description Message ID */
      path: {
        account: string;
        message: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["MessageUpdate"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["MessageUpdateResponse"];
        };
      };
    };
  };
  deleteV1AccountAccountMessageMessage: {
    /**
     * Delete message 
     * @description Move message to Trash or delete it if already in Trash
     */
    parameters: {
        /** @description Delete message even if not in Trash */
      query: {
        force?: boolean;
      };
        /** @description Account ID */
        /** @description Message ID */
      path: {
        account: string;
        message: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["MessageDeleteResponse"];
        };
      };
    };
  };
  getV1AccountAccountAttachmentAttachment: {
    /**
     * Download attachment 
     * @description Fetches attachment file as a binary stream
     */
    parameters: {
        /** @description Account ID */
        /** @description Attachment ID */
      path: {
        account: string;
        attachment: string;
      };
    };
    responses: {
      /** @description Successful */
      default: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getV1AccountAccountTextText: {
    /**
     * Retrieve message text 
     * @description Retrieves message text
     */
    parameters: {
        /** @description Max length of text content. This setting is ignored if `documentStore` is `true`. */
        /** @description Which text content to return, use * for all. By default all contents are returned. */
        /** @description If enabled then fetch the data from the Document Store instead of IMAP */
      query: {
        maxBytes?: number;
        textType?: "html" | "plain" | "*";
        documentStore?: boolean;
      };
        /** @description Account ID */
        /** @description Message text ID */
      path: {
        account: string;
        text: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["TextResponse"];
        };
      };
    };
  };
  getV1AccountAccountMessageMessageSource: {
    /**
     * Download raw message 
     * @description Fetches raw message as a stream
     */
    parameters: {
        /** @description Account ID */
        /** @description Message ID */
      path: {
        account: string;
        message: string;
      };
    };
    responses: {
      /** @description Successful */
      default: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  postV1Account: {
    /**
     * Register new account 
     * @description Registers new IMAP account to be synced
     */
    requestBody?: {
      content: {
        "*/*": components["schemas"]["CreateAccount"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["CreateAccountResponse"];
        };
      };
    };
  };
  postV1Gateway: {
    /**
     * Register new gateway 
     * @description Registers a new SMP gateway
     */
    requestBody?: {
      content: {
        "*/*": components["schemas"]["CreateGateway"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["CreateGatewayResponse"];
        };
      };
    };
  };
  postV1Token: {
    /**
     * Provision an access token 
     * @description Provisions a new access token for an account
     */
    requestBody?: {
      content: {
        "*/*": components["schemas"]["CreateToken"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["CreateTokenResponse"];
        };
      };
    };
  };
  postV1Verifyaccount: {
    /**
     * Verify IMAP and SMTP settings 
     * @description Checks if can connect and authenticate using provided account info
     */
    requestBody?: {
      content: {
        "*/*": components["schemas"]["VerifyAccount"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["VerifyAccountResponse"];
        };
      };
    };
  };
  postV1AuthenticationForm: {
    /**
     * Generate authentication link 
     * @description Generates a redirect link to the hosted authentication form
     */
    requestBody?: {
      content: {
        "*/*": components["schemas"]["RequestAuthForm"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["RequestAuthFormResponse"];
        };
      };
    };
  };
  postV1TemplatesTemplate: {
    /**
     * Create template 
     * @description Create a new stored template. Templates can be used when sending emails as the content of the message.
     */
    requestBody?: {
      content: {
        "*/*": components["schemas"]["CreateTemplate"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["CreateTemplateResponse"];
        };
      };
    };
  };
  postV1AccountAccountSearch: {
    /**
     * Search for messages 
     * @description Filter messages from a mailbox folder by search options. Search is performed against a specific folder and not for the entire account.
     */
    parameters: {
        /** @description Mailbox folder path. Not required if `documentStore` is `true` */
        /** @description Page number (zero indexed, so use 0 for first page) */
        /** @description How many entries per page */
        /** @description If enabled then fetch the data from the Document Store instead of IMAP */
        /** @description If enabled then returns the ElasticSearch query for debugging as part of the response */
      query: {
        path?: string;
        page?: number;
        pageSize?: number;
        documentStore?: boolean;
        exposeQuery?: boolean;
      };
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["Model18"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["MessageList"];
        };
      };
    };
  };
  putV1AccountAccountMailbox: {
    /**
     * Rename mailbox 
     * @description Rename an existing mailbox folder
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["RenameMailbox"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["RenameMailboxResponse"];
        };
      };
    };
  };
  postV1AccountAccountMailbox: {
    /**
     * Create mailbox 
     * @description Create new mailbox folder
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["CreateMailbox"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["CreateMailboxResponse"];
        };
      };
    };
  };
  deleteV1AccountAccountMailbox: {
    /**
     * Delete mailbox 
     * @description Delete existing mailbox folder
     */
    parameters: {
        /** @description Mailbox folder path to delete */
      query: {
        path: string;
      };
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteMailboxResponse"];
        };
      };
    };
  };
  postV1AccountAccountMessage: {
    /**
     * Upload message 
     * @description Upload a message structure, compile it into an EML file and store it into selected mailbox.
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["MessageUpload"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["MessageUploadResponse"];
        };
      };
    };
  };
  postV1AccountAccountSubmit: {
    /**
     * Submit message for delivery 
     * @description Submit message for delivery. If reference message ID is provided then EmailEngine adds all headers and flags required for a reply/forward automatically.
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["SubmitMessage"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["SubmitMessageResponse"];
        };
      };
    };
  };
  postV1DeliverytestAccountAccount: {
    /**
     * Create delivery test 
     * @description Initiate a delivery test
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["DeliveryStartRequest"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["DeliveryStartResponse"];
        };
      };
    };
  };
  deleteV1OutboxQueueid: {
    /**
     * Remove a message 
     * @description Remove a message from the outbox
     */
    parameters: {
        /** @description Queue identifier for scheduled email */
      path: {
        queueId: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteOutboxEntryResponse"];
        };
      };
    };
  };
  deleteV1TokenToken: {
    /**
     * Remove a token 
     * @description Delete an access token
     */
    parameters: {
        /** @description Access token */
      path: {
        token: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteTokenRequestResponse"];
        };
      };
    };
  };
  deleteV1TemplatesAccountAccount: {
    /**
     * Flush templates 
     * @description Delete all stored templates for an account
     */
    parameters: {
        /** @description Must be true in order to flush templates */
      query: {
        force?: true;
      };
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteTemplateRequestResponse"];
        };
      };
    };
  };
  putV1AccountAccountReconnect: {
    /**
     * Request reconnect 
     * @description Requests connection to be reconnected
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["RequestReconnect"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["RequestReconnectResponse"];
        };
      };
    };
  };
  putV1AccountAccountSync: {
    /**
     * Request syncing 
     * @description Requests account syncing to be run immediatelly
     */
    parameters: {
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["RequestSync"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["RequestSyncResponse"];
        };
      };
    };
  };
  putV1GatewayEditGateway: {
    /**
     * Update gateway info 
     * @description Updates gateway information
     */
    parameters: {
        /** @description Gateway ID */
      path: {
        gateway: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["Model26"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateGatewayResponse"];
        };
      };
    };
  };
  putV1AccountAccountMessagesMove: {
    /**
     * Move messages 
     * @description Move messages matching to a search query to another folder
     */
    parameters: {
        /** @description Source mailbox folder path */
      query: {
        path: string;
      };
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["MessagesMoveRequest"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["MessagesMoveResponse"];
        };
      };
    };
  };
  putV1AccountAccountMessagesDelete: {
    /**
     * Delete messages 
     * @description Move messages to Trash or delete these if already in Trash
     */
    parameters: {
        /** @description Mailbox folder path */
        /** @description Delete messages even if not in Trash */
      query: {
        path: string;
        force?: boolean;
      };
        /** @description Account ID */
      path: {
        account: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["MessagesDeleteRequest"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["MessagesDeleteResponse"];
        };
      };
    };
  };
  putV1AccountAccountMessageMessageMove: {
    /**
     * Move message 
     * @description Move message to another folder
     */
    parameters: {
        /** @description Account ID */
        /** @description Message ID */
      path: {
        account: string;
        message: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["MessageMove"];
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "*/*": components["schemas"]["MessageMoveResponse"];
        };
      };
    };
  };
}
